// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/client_services.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("lorawan-stack/api/client_services.proto", fileDescriptor_80815ba053239a77)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/client_services.proto", fileDescriptor_80815ba053239a77)
}

var fileDescriptor_80815ba053239a77 = []byte{
	// 702 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xc1, 0x4f, 0x13, 0x4f,
	0x14, 0xee, 0xf0, 0xfb, 0x51, 0xcc, 0xc4, 0x40, 0x9c, 0x18, 0x4c, 0x96, 0xb2, 0xca, 0x42, 0x42,
	0xd2, 0xc8, 0x8c, 0x81, 0x98, 0x18, 0x6f, 0x8a, 0x8a, 0x46, 0x0f, 0x0a, 0xe1, 0xd2, 0x0b, 0xd9,
	0x96, 0x61, 0x3b, 0x76, 0xd9, 0x59, 0x66, 0x5e, 0x21, 0x48, 0x48, 0x88, 0x07, 0x3d, 0x99, 0x68,
	0x3c, 0x79, 0xf3, 0xe8, 0x1f, 0xe0, 0x1f, 0x60, 0xbc, 0x99, 0x98, 0x78, 0xe0, 0xe2, 0x51, 0x5b,
	0x0f, 0x1e, 0xfd, 0x13, 0xcc, 0xce, 0xee, 0xe2, 0xb6, 0xdd, 0x0a, 0x0d, 0xde, 0xa6, 0xef, 0xbd,
	0xf9, 0xbe, 0xf7, 0xbe, 0x7d, 0xdf, 0x14, 0xcf, 0xfa, 0x52, 0xb9, 0x3b, 0x6e, 0x30, 0xa7, 0xc1,
	0xad, 0x35, 0x98, 0x1b, 0x0a, 0x56, 0xf3, 0x05, 0x0f, 0x60, 0x4d, 0x73, 0xb5, 0x2d, 0x6a, 0x5c,
	0xd3, 0x50, 0x49, 0x90, 0x64, 0x14, 0x20, 0xa0, 0x49, 0x31, 0xdd, 0x5e, 0xb0, 0xe6, 0x3c, 0x01,
	0xf5, 0x66, 0x95, 0xd6, 0xe4, 0x26, 0xf3, 0xa4, 0x27, 0x99, 0x29, 0xab, 0x36, 0x37, 0xcc, 0x2f,
	0xf3, 0xc3, 0x9c, 0xe2, 0xeb, 0x56, 0xc9, 0x93, 0xd2, 0xf3, 0xb9, 0x21, 0x70, 0x83, 0x40, 0x82,
	0x0b, 0x42, 0x06, 0x09, 0xb8, 0x35, 0x91, 0x64, 0x8f, 0x30, 0xf8, 0x66, 0x08, 0xbb, 0x49, 0xd2,
	0xee, 0xd7, 0x62, 0x92, 0x9f, 0xee, 0xcd, 0x8b, 0x75, 0x1e, 0x80, 0xd8, 0x10, 0x5c, 0xe9, 0xfe,
	0x20, 0x4a, 0x78, 0x75, 0x48, 0xf2, 0xf3, 0x9f, 0x47, 0xf0, 0xe8, 0xa2, 0x41, 0x5d, 0xe6, 0x9e,
	0xd0, 0xa0, 0x76, 0xc9, 0x17, 0x84, 0x8b, 0x8b, 0x8a, 0xbb, 0xc0, 0xc9, 0x34, 0xed, 0x9c, 0x9e,
	0xc6, 0xf1, 0xf4, 0xc2, 0x56, 0x93, 0x6b, 0xb0, 0xc6, 0x7b, 0x8a, 0x4c, 0xda, 0x79, 0x8e, 0x9e,
	0x1e, 0xfe, 0x78, 0x3d, 0x74, 0x80, 0x1c, 0xca, 0x9a, 0x9a, 0x2b, 0xcd, 0xf6, 0x6a, 0xd2, 0xf7,
	0xdd, 0xaa, 0x54, 0x2e, 0x48, 0x45, 0xa3, 0xd8, 0x9a, 0x58, 0xd7, 0xe9, 0x61, 0x3f, 0x19, 0x4f,
	0x5f, 0x47, 0xe5, 0xca, 0x7d, 0xe7, 0x0e, 0x93, 0xca, 0x73, 0x03, 0xf1, 0x24, 0x56, 0xac, 0xeb,
	0x72, 0x36, 0x67, 0x40, 0xba, 0x02, 0x59, 0x30, 0x52, 0xc7, 0xff, 0x2d, 0x71, 0x20, 0x97, 0xba,
	0x1b, 0x5d, 0xe2, 0x70, 0xb2, 0x51, 0x66, 0xcd, 0x24, 0x53, 0xe4, 0x62, 0x8a, 0xca, 0xf6, 0x92,
	0x6d, 0x89, 0xa8, 0x8f, 0x8e, 0xfb, 0xe4, 0x10, 0xe1, 0xff, 0x1f, 0x08, 0x0d, 0xc4, 0xe9, 0x46,
	0x8a, 0xa2, 0x31, 0x9a, 0x4e, 0xd9, 0x2e, 0xe4, 0xb3, 0x69, 0xe7, 0x45, 0xac, 0xdc, 0x33, 0x44,
	0xce, 0xa4, 0x84, 0x95, 0x2b, 0x64, 0x40, 0x15, 0x2b, 0x77, 0xc9, 0x3f, 0x92, 0x90, 0x6c, 0xe1,
	0xe2, 0x6a, 0xb8, 0x9e, 0xbb, 0x10, 0x71, 0xfc, 0x64, 0x2a, 0x96, 0xcd, 0x54, 0x33, 0x56, 0x8f,
	0x8a, 0xb4, 0x53, 0xc5, 0xe8, 0x93, 0xb9, 0xb8, 0x78, 0x8b, 0xfb, 0x1c, 0x38, 0x99, 0xca, 0x47,
	0xbb, 0xf7, 0x67, 0xd5, 0xad, 0x71, 0x1a, 0xfb, 0x88, 0xa6, 0x3e, 0xa2, 0xb7, 0x23, 0x1f, 0x39,
	0x25, 0x43, 0x38, 0x5e, 0x3e, 0x9f, 0xf3, 0xd9, 0xf6, 0xc9, 0x63, 0x3c, 0xb2, 0xcc, 0x35, 0x48,
	0x75, 0x2a, 0x8e, 0x19, 0xc3, 0x61, 0x3b, 0xa5, 0x3c, 0x0e, 0xa6, 0x12, 0x82, 0x0d, 0x3c, 0xfc,
	0xb0, 0xa9, 0xbc, 0x53, 0x31, 0x39, 0x86, 0xa9, 0x54, 0xb6, 0x72, 0x99, 0xc2, 0x08, 0x7e, 0xbe,
	0x3d, 0x8c, 0xcf, 0xc6, 0x88, 0x37, 0x6a, 0x35, 0xae, 0x35, 0xf1, 0x31, 0x8e, 0x36, 0x6f, 0xd9,
	0x78, 0xfe, 0x64, 0xec, 0x5d, 0x25, 0xf1, 0x55, 0x67, 0xda, 0xb0, 0x4f, 0x92, 0x89, 0xfc, 0x39,
	0x63, 0xfc, 0xf7, 0x43, 0x78, 0x2c, 0x32, 0x55, 0x66, 0xcd, 0xc8, 0xe5, 0xbe, 0xae, 0xcb, 0x96,
	0xa5, 0xbb, 0x33, 0x9b, 0x57, 0xdd, 0x51, 0xa7, 0x43, 0x19, 0x68, 0xee, 0x7c, 0x8a, 0x3d, 0xf2,
	0x11, 0x55, 0x56, 0xc8, 0xa3, 0x63, 0x6c, 0xc9, 0xb2, 0x7b, 0x6f, 0x5c, 0x74, 0x9c, 0x89, 0x2a,
	0x0d, 0x22, 0x06, 0x02, 0xcd, 0x7a, 0x67, 0x50, 0x9f, 0x91, 0x57, 0x08, 0x8f, 0xad, 0x1c, 0x27,
	0xdb, 0xca, 0xdf, 0x64, 0xeb, 0xb7, 0x33, 0xd7, 0x8c, 0x48, 0xf3, 0xd6, 0xdc, 0x20, 0xc3, 0x98,
	0x37, 0xf3, 0x0d, 0xc2, 0xe7, 0xcc, 0x9b, 0x95, 0x4d, 0x10, 0xda, 0xff, 0x59, 0xeb, 0x28, 0x4c,
	0xfb, 0x9a, 0xec, 0x59, 0xb8, 0x6c, 0x95, 0x73, 0xd5, 0xb4, 0xc7, 0xc8, 0x60, 0xed, 0xdd, 0x5c,
	0xfd, 0xfa, 0xdd, 0x2e, 0x1c, 0xb4, 0x6c, 0xf4, 0xae, 0x65, 0xa3, 0x6f, 0x2d, 0x1b, 0xfd, 0x6c,
	0xd9, 0x85, 0x5f, 0x2d, 0x1b, 0xbd, 0x6c, 0xdb, 0x85, 0xb7, 0x6d, 0xbb, 0xf0, 0xa1, 0x6d, 0xa3,
	0x0a, 0xf3, 0x24, 0x85, 0x3a, 0x87, 0xba, 0x08, 0x3c, 0x4d, 0x03, 0x0e, 0x3b, 0x52, 0x35, 0x58,
	0xe7, 0xff, 0xe1, 0xf6, 0x02, 0x0b, 0x1b, 0x1e, 0x03, 0x08, 0xc2, 0x6a, 0xb5, 0x68, 0xc4, 0x5b,
	0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x13, 0x3d, 0x8d, 0x1c, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientRegistryClient is the client API for ClientRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientRegistryClient interface {
	// Create a new OAuth client. This also sets the given organization or user as
	// first collaborator with all possible rights.
	Create(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*Client, error)
	// Get the OAuth client with the given identifiers, selecting the fields specified
	// in the field mask.
	// More or less fields may be returned, depending on the rights of the caller.
	Get(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*Client, error)
	// List OAuth clients where the given user or organization is a direct collaborator.
	// If no user or organization is given, this returns the OAuth clients the caller
	// has access to.
	// Similar to Get, this selects the fields specified in the field mask.
	// More or less fields may be returned, depending on the rights of the caller.
	List(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*Clients, error)
	// Update the OAuth client, changing the fields specified by the field mask to the provided values.
	Update(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*Client, error)
	// Delete the OAuth client. This may not release the client ID for reuse.
	Delete(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
	// Restore a recently deleted client.
	//
	// Deployment configuration may specify if, and for how long after deletion,
	// entities can be restored.
	Restore(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
	// Purge the client. This will release the client ID for reuse.
	Purge(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*types.Empty, error)
}

type clientRegistryClient struct {
	cc *grpc.ClientConn
}

func NewClientRegistryClient(cc *grpc.ClientConn) ClientRegistryClient {
	return &clientRegistryClient{cc}
}

func (c *clientRegistryClient) Create(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientRegistry/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegistryClient) Get(ctx context.Context, in *GetClientRequest, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegistryClient) List(ctx context.Context, in *ListClientsRequest, opts ...grpc.CallOption) (*Clients, error) {
	out := new(Clients)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegistryClient) Update(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientRegistry/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegistryClient) Delete(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegistryClient) Restore(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientRegistry/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegistryClient) Purge(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientRegistry/Purge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientRegistryServer is the server API for ClientRegistry service.
type ClientRegistryServer interface {
	// Create a new OAuth client. This also sets the given organization or user as
	// first collaborator with all possible rights.
	Create(context.Context, *CreateClientRequest) (*Client, error)
	// Get the OAuth client with the given identifiers, selecting the fields specified
	// in the field mask.
	// More or less fields may be returned, depending on the rights of the caller.
	Get(context.Context, *GetClientRequest) (*Client, error)
	// List OAuth clients where the given user or organization is a direct collaborator.
	// If no user or organization is given, this returns the OAuth clients the caller
	// has access to.
	// Similar to Get, this selects the fields specified in the field mask.
	// More or less fields may be returned, depending on the rights of the caller.
	List(context.Context, *ListClientsRequest) (*Clients, error)
	// Update the OAuth client, changing the fields specified by the field mask to the provided values.
	Update(context.Context, *UpdateClientRequest) (*Client, error)
	// Delete the OAuth client. This may not release the client ID for reuse.
	Delete(context.Context, *ClientIdentifiers) (*types.Empty, error)
	// Restore a recently deleted client.
	//
	// Deployment configuration may specify if, and for how long after deletion,
	// entities can be restored.
	Restore(context.Context, *ClientIdentifiers) (*types.Empty, error)
	// Purge the client. This will release the client ID for reuse.
	Purge(context.Context, *ClientIdentifiers) (*types.Empty, error)
}

// UnimplementedClientRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedClientRegistryServer struct {
}

func (*UnimplementedClientRegistryServer) Create(ctx context.Context, req *CreateClientRequest) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedClientRegistryServer) Get(ctx context.Context, req *GetClientRequest) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedClientRegistryServer) List(ctx context.Context, req *ListClientsRequest) (*Clients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedClientRegistryServer) Update(ctx context.Context, req *UpdateClientRequest) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedClientRegistryServer) Delete(ctx context.Context, req *ClientIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedClientRegistryServer) Restore(ctx context.Context, req *ClientIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (*UnimplementedClientRegistryServer) Purge(ctx context.Context, req *ClientIdentifiers) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purge not implemented")
}

func RegisterClientRegistryServer(s *grpc.Server, srv ClientRegistryServer) {
	s.RegisterService(&_ClientRegistry_serviceDesc, srv)
}

func _ClientRegistry_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientRegistry/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistryServer).Create(ctx, req.(*CreateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistryServer).Get(ctx, req.(*GetClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistryServer).List(ctx, req.(*ListClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegistry_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientRegistry/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistryServer).Update(ctx, req.(*UpdateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistryServer).Delete(ctx, req.(*ClientIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegistry_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistryServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientRegistry/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistryServer).Restore(ctx, req.(*ClientIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegistry_Purge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegistryServer).Purge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientRegistry/Purge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegistryServer).Purge(ctx, req.(*ClientIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.ClientRegistry",
	HandlerType: (*ClientRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ClientRegistry_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ClientRegistry_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ClientRegistry_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ClientRegistry_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ClientRegistry_Delete_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _ClientRegistry_Restore_Handler,
		},
		{
			MethodName: "Purge",
			Handler:    _ClientRegistry_Purge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/client_services.proto",
}

// ClientAccessClient is the client API for ClientAccess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientAccessClient interface {
	// List the rights the caller has on this application.
	ListRights(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*Rights, error)
	// Get the rights of a collaborator (member) of the client.
	// Pseudo-rights in the response (such as the "_ALL" right) are not expanded.
	GetCollaborator(ctx context.Context, in *GetClientCollaboratorRequest, opts ...grpc.CallOption) (*GetCollaboratorResponse, error)
	// Set the rights of a collaborator (member) on the OAuth client.
	// This method can also be used to delete the collaborator, by giving them no rights.
	// The caller is required to have all assigned or/and removed rights.
	SetCollaborator(ctx context.Context, in *SetClientCollaboratorRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// List the collaborators on this OAuth client.
	ListCollaborators(ctx context.Context, in *ListClientCollaboratorsRequest, opts ...grpc.CallOption) (*Collaborators, error)
}

type clientAccessClient struct {
	cc *grpc.ClientConn
}

func NewClientAccessClient(cc *grpc.ClientConn) ClientAccessClient {
	return &clientAccessClient{cc}
}

func (c *clientAccessClient) ListRights(ctx context.Context, in *ClientIdentifiers, opts ...grpc.CallOption) (*Rights, error) {
	out := new(Rights)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientAccess/ListRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientAccessClient) GetCollaborator(ctx context.Context, in *GetClientCollaboratorRequest, opts ...grpc.CallOption) (*GetCollaboratorResponse, error) {
	out := new(GetCollaboratorResponse)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientAccess/GetCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientAccessClient) SetCollaborator(ctx context.Context, in *SetClientCollaboratorRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientAccess/SetCollaborator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientAccessClient) ListCollaborators(ctx context.Context, in *ListClientCollaboratorsRequest, opts ...grpc.CallOption) (*Collaborators, error) {
	out := new(Collaborators)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClientAccess/ListCollaborators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientAccessServer is the server API for ClientAccess service.
type ClientAccessServer interface {
	// List the rights the caller has on this application.
	ListRights(context.Context, *ClientIdentifiers) (*Rights, error)
	// Get the rights of a collaborator (member) of the client.
	// Pseudo-rights in the response (such as the "_ALL" right) are not expanded.
	GetCollaborator(context.Context, *GetClientCollaboratorRequest) (*GetCollaboratorResponse, error)
	// Set the rights of a collaborator (member) on the OAuth client.
	// This method can also be used to delete the collaborator, by giving them no rights.
	// The caller is required to have all assigned or/and removed rights.
	SetCollaborator(context.Context, *SetClientCollaboratorRequest) (*types.Empty, error)
	// List the collaborators on this OAuth client.
	ListCollaborators(context.Context, *ListClientCollaboratorsRequest) (*Collaborators, error)
}

// UnimplementedClientAccessServer can be embedded to have forward compatible implementations.
type UnimplementedClientAccessServer struct {
}

func (*UnimplementedClientAccessServer) ListRights(ctx context.Context, req *ClientIdentifiers) (*Rights, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRights not implemented")
}
func (*UnimplementedClientAccessServer) GetCollaborator(ctx context.Context, req *GetClientCollaboratorRequest) (*GetCollaboratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollaborator not implemented")
}
func (*UnimplementedClientAccessServer) SetCollaborator(ctx context.Context, req *SetClientCollaboratorRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCollaborator not implemented")
}
func (*UnimplementedClientAccessServer) ListCollaborators(ctx context.Context, req *ListClientCollaboratorsRequest) (*Collaborators, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollaborators not implemented")
}

func RegisterClientAccessServer(s *grpc.Server, srv ClientAccessServer) {
	s.RegisterService(&_ClientAccess_serviceDesc, srv)
}

func _ClientAccess_ListRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentifiers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAccessServer).ListRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientAccess/ListRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAccessServer).ListRights(ctx, req.(*ClientIdentifiers))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientAccess_GetCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAccessServer).GetCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientAccess/GetCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAccessServer).GetCollaborator(ctx, req.(*GetClientCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientAccess_SetCollaborator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClientCollaboratorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAccessServer).SetCollaborator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientAccess/SetCollaborator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAccessServer).SetCollaborator(ctx, req.(*SetClientCollaboratorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientAccess_ListCollaborators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClientCollaboratorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAccessServer).ListCollaborators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClientAccess/ListCollaborators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAccessServer).ListCollaborators(ctx, req.(*ListClientCollaboratorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientAccess_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.ClientAccess",
	HandlerType: (*ClientAccessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRights",
			Handler:    _ClientAccess_ListRights_Handler,
		},
		{
			MethodName: "GetCollaborator",
			Handler:    _ClientAccess_GetCollaborator_Handler,
		},
		{
			MethodName: "SetCollaborator",
			Handler:    _ClientAccess_SetCollaborator_Handler,
		},
		{
			MethodName: "ListCollaborators",
			Handler:    _ClientAccess_ListCollaborators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/client_services.proto",
}
