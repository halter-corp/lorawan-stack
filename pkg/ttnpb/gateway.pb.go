// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/gateway.proto

package ttnpb

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	go_thethings_network_lorawan_stack_v3_pkg_types "go.thethings.network/lorawan-stack/v3/pkg/types"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GatewayAntennaPlacement int32

const (
	GatewayAntennaPlacement_PLACEMENT_UNKNOWN GatewayAntennaPlacement = 0
	GatewayAntennaPlacement_INDOOR            GatewayAntennaPlacement = 1
	GatewayAntennaPlacement_OUTDOOR           GatewayAntennaPlacement = 2
)

var GatewayAntennaPlacement_name = map[int32]string{
	0: "PLACEMENT_UNKNOWN",
	1: "INDOOR",
	2: "OUTDOOR",
}

var GatewayAntennaPlacement_value = map[string]int32{
	"PLACEMENT_UNKNOWN": 0,
	"INDOOR":            1,
	"OUTDOOR":           2,
}

func (GatewayAntennaPlacement) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{0}
}

type GatewayBrand struct {
	ID   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	URL  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// Logos contains file names of brand logos.
	Logos                []string `protobuf:"bytes,4,rep,name=logos,proto3" json:"logos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayBrand) Reset()      { *m = GatewayBrand{} }
func (*GatewayBrand) ProtoMessage() {}
func (*GatewayBrand) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{0}
}
func (m *GatewayBrand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayBrand.Unmarshal(m, b)
}
func (m *GatewayBrand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayBrand.Marshal(b, m, deterministic)
}
func (m *GatewayBrand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayBrand.Merge(m, src)
}
func (m *GatewayBrand) XXX_Size() int {
	return xxx_messageInfo_GatewayBrand.Size(m)
}
func (m *GatewayBrand) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayBrand.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayBrand proto.InternalMessageInfo

func (m *GatewayBrand) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *GatewayBrand) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GatewayBrand) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *GatewayBrand) GetLogos() []string {
	if m != nil {
		return m.Logos
	}
	return nil
}

type GatewayModel struct {
	BrandID              string   `protobuf:"bytes,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	ID                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayModel) Reset()      { *m = GatewayModel{} }
func (*GatewayModel) ProtoMessage() {}
func (*GatewayModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{1}
}
func (m *GatewayModel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayModel.Unmarshal(m, b)
}
func (m *GatewayModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayModel.Marshal(b, m, deterministic)
}
func (m *GatewayModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayModel.Merge(m, src)
}
func (m *GatewayModel) XXX_Size() int {
	return xxx_messageInfo_GatewayModel.Size(m)
}
func (m *GatewayModel) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayModel.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayModel proto.InternalMessageInfo

func (m *GatewayModel) GetBrandID() string {
	if m != nil {
		return m.BrandID
	}
	return ""
}

func (m *GatewayModel) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *GatewayModel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Identifies an end device model with version information.
type GatewayVersionIdentifiers struct {
	BrandID              string   `protobuf:"bytes,1,opt,name=brand_id,json=brandId,proto3" json:"brand_id,omitempty"`
	ModelID              string   `protobuf:"bytes,2,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	HardwareVersion      string   `protobuf:"bytes,3,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	FirmwareVersion      string   `protobuf:"bytes,4,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayVersionIdentifiers) Reset()      { *m = GatewayVersionIdentifiers{} }
func (*GatewayVersionIdentifiers) ProtoMessage() {}
func (*GatewayVersionIdentifiers) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{2}
}
func (m *GatewayVersionIdentifiers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayVersionIdentifiers.Unmarshal(m, b)
}
func (m *GatewayVersionIdentifiers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayVersionIdentifiers.Marshal(b, m, deterministic)
}
func (m *GatewayVersionIdentifiers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayVersionIdentifiers.Merge(m, src)
}
func (m *GatewayVersionIdentifiers) XXX_Size() int {
	return xxx_messageInfo_GatewayVersionIdentifiers.Size(m)
}
func (m *GatewayVersionIdentifiers) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayVersionIdentifiers.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayVersionIdentifiers proto.InternalMessageInfo

func (m *GatewayVersionIdentifiers) GetBrandID() string {
	if m != nil {
		return m.BrandID
	}
	return ""
}

func (m *GatewayVersionIdentifiers) GetModelID() string {
	if m != nil {
		return m.ModelID
	}
	return ""
}

func (m *GatewayVersionIdentifiers) GetHardwareVersion() string {
	if m != nil {
		return m.HardwareVersion
	}
	return ""
}

func (m *GatewayVersionIdentifiers) GetFirmwareVersion() string {
	if m != nil {
		return m.FirmwareVersion
	}
	return ""
}

type GatewayRadio struct {
	Enable               bool                          `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	ChipType             string                        `protobuf:"bytes,2,opt,name=chip_type,json=chipType,proto3" json:"chip_type,omitempty"`
	Frequency            uint64                        `protobuf:"varint,3,opt,name=frequency,proto3" json:"frequency,omitempty"`
	RSSIOffset           float32                       `protobuf:"fixed32,4,opt,name=rssi_offset,json=rssiOffset,proto3" json:"rssi_offset,omitempty"`
	TxConfiguration      *GatewayRadio_TxConfiguration `protobuf:"bytes,5,opt,name=tx_configuration,json=txConfiguration,proto3" json:"tx_configuration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GatewayRadio) Reset()      { *m = GatewayRadio{} }
func (*GatewayRadio) ProtoMessage() {}
func (*GatewayRadio) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{3}
}
func (m *GatewayRadio) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayRadio.Unmarshal(m, b)
}
func (m *GatewayRadio) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayRadio.Marshal(b, m, deterministic)
}
func (m *GatewayRadio) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayRadio.Merge(m, src)
}
func (m *GatewayRadio) XXX_Size() int {
	return xxx_messageInfo_GatewayRadio.Size(m)
}
func (m *GatewayRadio) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayRadio.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayRadio proto.InternalMessageInfo

func (m *GatewayRadio) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *GatewayRadio) GetChipType() string {
	if m != nil {
		return m.ChipType
	}
	return ""
}

func (m *GatewayRadio) GetFrequency() uint64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *GatewayRadio) GetRSSIOffset() float32 {
	if m != nil {
		return m.RSSIOffset
	}
	return 0
}

func (m *GatewayRadio) GetTxConfiguration() *GatewayRadio_TxConfiguration {
	if m != nil {
		return m.TxConfiguration
	}
	return nil
}

type GatewayRadio_TxConfiguration struct {
	MinFrequency         uint64   `protobuf:"varint,1,opt,name=min_frequency,json=minFrequency,proto3" json:"min_frequency,omitempty"`
	MaxFrequency         uint64   `protobuf:"varint,2,opt,name=max_frequency,json=maxFrequency,proto3" json:"max_frequency,omitempty"`
	NotchFrequency       uint64   `protobuf:"varint,3,opt,name=notch_frequency,json=notchFrequency,proto3" json:"notch_frequency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayRadio_TxConfiguration) Reset()      { *m = GatewayRadio_TxConfiguration{} }
func (*GatewayRadio_TxConfiguration) ProtoMessage() {}
func (*GatewayRadio_TxConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{3, 0}
}
func (m *GatewayRadio_TxConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayRadio_TxConfiguration.Unmarshal(m, b)
}
func (m *GatewayRadio_TxConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayRadio_TxConfiguration.Marshal(b, m, deterministic)
}
func (m *GatewayRadio_TxConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayRadio_TxConfiguration.Merge(m, src)
}
func (m *GatewayRadio_TxConfiguration) XXX_Size() int {
	return xxx_messageInfo_GatewayRadio_TxConfiguration.Size(m)
}
func (m *GatewayRadio_TxConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayRadio_TxConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayRadio_TxConfiguration proto.InternalMessageInfo

func (m *GatewayRadio_TxConfiguration) GetMinFrequency() uint64 {
	if m != nil {
		return m.MinFrequency
	}
	return 0
}

func (m *GatewayRadio_TxConfiguration) GetMaxFrequency() uint64 {
	if m != nil {
		return m.MaxFrequency
	}
	return 0
}

func (m *GatewayRadio_TxConfiguration) GetNotchFrequency() uint64 {
	if m != nil {
		return m.NotchFrequency
	}
	return 0
}

// Authentication code for claiming gateways.
type GatewayClaimAuthenticationCode struct {
	Secret               *Secret    `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	ValidFrom            *time.Time `protobuf:"bytes,2,opt,name=valid_from,json=validFrom,proto3,stdtime" json:"valid_from,omitempty"`
	ValidTo              *time.Time `protobuf:"bytes,3,opt,name=valid_to,json=validTo,proto3,stdtime" json:"valid_to,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GatewayClaimAuthenticationCode) Reset()      { *m = GatewayClaimAuthenticationCode{} }
func (*GatewayClaimAuthenticationCode) ProtoMessage() {}
func (*GatewayClaimAuthenticationCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{4}
}
func (m *GatewayClaimAuthenticationCode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayClaimAuthenticationCode.Unmarshal(m, b)
}
func (m *GatewayClaimAuthenticationCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayClaimAuthenticationCode.Marshal(b, m, deterministic)
}
func (m *GatewayClaimAuthenticationCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayClaimAuthenticationCode.Merge(m, src)
}
func (m *GatewayClaimAuthenticationCode) XXX_Size() int {
	return xxx_messageInfo_GatewayClaimAuthenticationCode.Size(m)
}
func (m *GatewayClaimAuthenticationCode) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayClaimAuthenticationCode.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayClaimAuthenticationCode proto.InternalMessageInfo

func (m *GatewayClaimAuthenticationCode) GetSecret() *Secret {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *GatewayClaimAuthenticationCode) GetValidFrom() *time.Time {
	if m != nil {
		return m.ValidFrom
	}
	return nil
}

func (m *GatewayClaimAuthenticationCode) GetValidTo() *time.Time {
	if m != nil {
		return m.ValidTo
	}
	return nil
}

// Gateway is the message that defines a gateway on the network.
type Gateway struct {
	GatewayIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	CreatedAt          time.Time  `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt          time.Time  `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
	DeletedAt          *time.Time `protobuf:"bytes,26,opt,name=deleted_at,json=deletedAt,proto3,stdtime" json:"deleted_at,omitempty"`
	Name               string     `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description        string     `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Key-value attributes for this gateway. Typically used for organizing gateways or for storing integration-specific data.
	Attributes map[string]string `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Contact information for this gateway. Typically used to indicate who to contact with technical/security questions about the gateway.
	ContactInfo               []*ContactInfo `protobuf:"bytes,7,rep,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
	GatewayVersionIdentifiers `protobuf:"bytes,8,opt,name=version_ids,json=versionIds,proto3,embedded=version_ids" json:"version_ids"`
	// The address of the Gateway Server to connect to.
	// The typical format of the address is "host:port". If the port is omitted,
	// the normal port inference (with DNS lookup, otherwise defaults) is used.
	// The connection shall be established with transport layer security (TLS).
	// Custom certificate authorities may be configured out-of-band.
	GatewayServerAddress string `protobuf:"bytes,9,opt,name=gateway_server_address,json=gatewayServerAddress,proto3" json:"gateway_server_address,omitempty"`
	AutoUpdate           bool   `protobuf:"varint,10,opt,name=auto_update,json=autoUpdate,proto3" json:"auto_update,omitempty"`
	UpdateChannel        string `protobuf:"bytes,11,opt,name=update_channel,json=updateChannel,proto3" json:"update_channel,omitempty"`
	// Frequency plan ID of the gateway.
	// This equals the first element of the frequency_plan_ids field.
	FrequencyPlanID string `protobuf:"bytes,12,opt,name=frequency_plan_id,json=frequencyPlanId,proto3" json:"frequency_plan_id,omitempty"`
	// Frequency plan IDs of the gateway.
	// The first element equals the frequency_plan_id field.
	FrequencyPlanIDs []string         `protobuf:"bytes,20,rep,name=frequency_plan_ids,json=frequencyPlanIds,proto3" json:"frequency_plan_ids,omitempty"`
	Antennas         []GatewayAntenna `protobuf:"bytes,13,rep,name=antennas,proto3" json:"antennas"`
	// The status of this gateway may be publicly displayed.
	StatusPublic bool `protobuf:"varint,14,opt,name=status_public,json=statusPublic,proto3" json:"status_public,omitempty"`
	// The location of this gateway may be publicly displayed.
	LocationPublic bool `protobuf:"varint,15,opt,name=location_public,json=locationPublic,proto3" json:"location_public,omitempty"`
	// Enable server-side buffering of downlink messages. This is recommended for gateways using the Semtech UDP Packet
	// Forwarder v2.x or older, as it does not feature a just-in-time queue. If enabled, the Gateway Server schedules the
	// downlink message late to the gateway so that it does not overwrite previously scheduled downlink messages that have
	// not been transmitted yet.
	ScheduleDownlinkLate bool `protobuf:"varint,16,opt,name=schedule_downlink_late,json=scheduleDownlinkLate,proto3" json:"schedule_downlink_late,omitempty"`
	// Enforcing gateway duty cycle is recommended for all gateways to respect spectrum regulations. Disable enforcing the
	// duty cycle only in controlled research and development environments.
	EnforceDutyCycle       bool                   `protobuf:"varint,17,opt,name=enforce_duty_cycle,json=enforceDutyCycle,proto3" json:"enforce_duty_cycle,omitempty"`
	DownlinkPathConstraint DownlinkPathConstraint `protobuf:"varint,18,opt,name=downlink_path_constraint,json=downlinkPathConstraint,proto3,enum=ttn.lorawan.v3.DownlinkPathConstraint" json:"downlink_path_constraint,omitempty"`
	// Adjust the time that GS schedules class C messages in advance. This is useful for gateways that have a known high latency backhaul, like 3G and satellite.
	ScheduleAnytimeDelay *time.Duration `protobuf:"bytes,19,opt,name=schedule_anytime_delay,json=scheduleAnytimeDelay,proto3,stdduration" json:"schedule_anytime_delay,omitempty"`
	// Update the location of this gateway from status messages. This only works for gateways connecting with authentication; gateways connected over UDP are not supported.
	UpdateLocationFromStatus bool `protobuf:"varint,21,opt,name=update_location_from_status,json=updateLocationFromStatus,proto3" json:"update_location_from_status,omitempty"`
	// The LoRa Basics Station LNS secret.
	// This is either an auth token (such as an API Key) or a TLS private certificate.
	// Requires the RIGHT_GATEWAY_READ_SECRETS for reading and RIGHT_GATEWAY_WRITE_SECRETS for updating this value.
	LBSLNSSecret *Secret `protobuf:"bytes,22,opt,name=lbs_lns_secret,json=lbsLnsSecret,proto3" json:"lbs_lns_secret,omitempty"`
	// The authentication code for gateway claiming.
	// Requires the RIGHT_GATEWAY_READ_SECRETS for reading and RIGHT_GATEWAY_WRITE_SECRETS for updating this value.
	// The entire field must be used in RPCs since sub-fields are validated wrt to each other. Direct selection/update of sub-fields only are not allowed.
	// Use the top level field mask `claim_authentication_code` even when updating single fields.
	ClaimAuthenticationCode *GatewayClaimAuthenticationCode `protobuf:"bytes,23,opt,name=claim_authentication_code,json=claimAuthenticationCode,proto3" json:"claim_authentication_code,omitempty"`
	// CUPS URI for LoRa Basics Station CUPS redirection.
	// The CUPS Trust field will be automatically fetched from the cert chain presented by the target server.
	TargetCUPSURI string `protobuf:"bytes,24,opt,name=target_cups_uri,json=targetCupsUri,proto3" json:"target_cups_uri,omitempty"`
	// CUPS Key for LoRa Basics Station CUPS redirection.
	// If redirecting to another instance of TTS, use the CUPS API Key for the gateway on the target instance.
	// Requires the RIGHT_GATEWAY_READ_SECRETS for reading and RIGHT_GATEWAY_WRITE_SECRETS for updating this value.
	TargetCUPSKey *Secret `protobuf:"bytes,25,opt,name=target_cups_key,json=targetCupsKey,proto3" json:"target_cups_key,omitempty"`
	// Require an authenticated gateway connection. This prevents the gateway from using the UDP protocol and requires authentication when using other protocols.
	RequireAuthenticatedConnection bool            `protobuf:"varint,27,opt,name=require_authenticated_connection,json=requireAuthenticatedConnection,proto3" json:"require_authenticated_connection,omitempty"`
	Lrfhss                         *Gateway_LRFHSS `protobuf:"bytes,28,opt,name=lrfhss,proto3" json:"lrfhss,omitempty"`
	DisablePacketBrokerForwarding  bool            `protobuf:"varint,29,opt,name=disable_packet_broker_forwarding,json=disablePacketBrokerForwarding,proto3" json:"disable_packet_broker_forwarding,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}        `json:"-"`
	XXX_sizecache                  int32           `json:"-"`
}

func (m *Gateway) Reset()      { *m = Gateway{} }
func (*Gateway) ProtoMessage() {}
func (*Gateway) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{5}
}
func (m *Gateway) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Gateway.Unmarshal(m, b)
}
func (m *Gateway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Gateway.Marshal(b, m, deterministic)
}
func (m *Gateway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gateway.Merge(m, src)
}
func (m *Gateway) XXX_Size() int {
	return xxx_messageInfo_Gateway.Size(m)
}
func (m *Gateway) XXX_DiscardUnknown() {
	xxx_messageInfo_Gateway.DiscardUnknown(m)
}

var xxx_messageInfo_Gateway proto.InternalMessageInfo

func (m *Gateway) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Gateway) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *Gateway) GetDeletedAt() *time.Time {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *Gateway) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Gateway) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Gateway) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Gateway) GetContactInfo() []*ContactInfo {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *Gateway) GetGatewayServerAddress() string {
	if m != nil {
		return m.GatewayServerAddress
	}
	return ""
}

func (m *Gateway) GetAutoUpdate() bool {
	if m != nil {
		return m.AutoUpdate
	}
	return false
}

func (m *Gateway) GetUpdateChannel() string {
	if m != nil {
		return m.UpdateChannel
	}
	return ""
}

func (m *Gateway) GetFrequencyPlanID() string {
	if m != nil {
		return m.FrequencyPlanID
	}
	return ""
}

func (m *Gateway) GetFrequencyPlanIDs() []string {
	if m != nil {
		return m.FrequencyPlanIDs
	}
	return nil
}

func (m *Gateway) GetAntennas() []GatewayAntenna {
	if m != nil {
		return m.Antennas
	}
	return nil
}

func (m *Gateway) GetStatusPublic() bool {
	if m != nil {
		return m.StatusPublic
	}
	return false
}

func (m *Gateway) GetLocationPublic() bool {
	if m != nil {
		return m.LocationPublic
	}
	return false
}

func (m *Gateway) GetScheduleDownlinkLate() bool {
	if m != nil {
		return m.ScheduleDownlinkLate
	}
	return false
}

func (m *Gateway) GetEnforceDutyCycle() bool {
	if m != nil {
		return m.EnforceDutyCycle
	}
	return false
}

func (m *Gateway) GetDownlinkPathConstraint() DownlinkPathConstraint {
	if m != nil {
		return m.DownlinkPathConstraint
	}
	return DOWNLINK_PATH_CONSTRAINT_NONE
}

func (m *Gateway) GetScheduleAnytimeDelay() *time.Duration {
	if m != nil {
		return m.ScheduleAnytimeDelay
	}
	return nil
}

func (m *Gateway) GetUpdateLocationFromStatus() bool {
	if m != nil {
		return m.UpdateLocationFromStatus
	}
	return false
}

func (m *Gateway) GetLBSLNSSecret() *Secret {
	if m != nil {
		return m.LBSLNSSecret
	}
	return nil
}

func (m *Gateway) GetClaimAuthenticationCode() *GatewayClaimAuthenticationCode {
	if m != nil {
		return m.ClaimAuthenticationCode
	}
	return nil
}

func (m *Gateway) GetTargetCUPSURI() string {
	if m != nil {
		return m.TargetCUPSURI
	}
	return ""
}

func (m *Gateway) GetTargetCUPSKey() *Secret {
	if m != nil {
		return m.TargetCUPSKey
	}
	return nil
}

func (m *Gateway) GetRequireAuthenticatedConnection() bool {
	if m != nil {
		return m.RequireAuthenticatedConnection
	}
	return false
}

func (m *Gateway) GetLrfhss() *Gateway_LRFHSS {
	if m != nil {
		return m.Lrfhss
	}
	return nil
}

func (m *Gateway) GetDisablePacketBrokerForwarding() bool {
	if m != nil {
		return m.DisablePacketBrokerForwarding
	}
	return false
}

// LR-FHSS gateway capabilities.
type Gateway_LRFHSS struct {
	// The gateway supports the LR-FHSS uplink channels.
	Supported            bool     `protobuf:"varint,1,opt,name=supported,proto3" json:"supported,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Gateway_LRFHSS) Reset()      { *m = Gateway_LRFHSS{} }
func (*Gateway_LRFHSS) ProtoMessage() {}
func (*Gateway_LRFHSS) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{5, 1}
}
func (m *Gateway_LRFHSS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Gateway_LRFHSS.Unmarshal(m, b)
}
func (m *Gateway_LRFHSS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Gateway_LRFHSS.Marshal(b, m, deterministic)
}
func (m *Gateway_LRFHSS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gateway_LRFHSS.Merge(m, src)
}
func (m *Gateway_LRFHSS) XXX_Size() int {
	return xxx_messageInfo_Gateway_LRFHSS.Size(m)
}
func (m *Gateway_LRFHSS) XXX_DiscardUnknown() {
	xxx_messageInfo_Gateway_LRFHSS.DiscardUnknown(m)
}

var xxx_messageInfo_Gateway_LRFHSS proto.InternalMessageInfo

func (m *Gateway_LRFHSS) GetSupported() bool {
	if m != nil {
		return m.Supported
	}
	return false
}

type Gateways struct {
	Gateways             []*Gateway `protobuf:"bytes,1,rep,name=gateways,proto3" json:"gateways,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Gateways) Reset()      { *m = Gateways{} }
func (*Gateways) ProtoMessage() {}
func (*Gateways) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{6}
}
func (m *Gateways) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Gateways.Unmarshal(m, b)
}
func (m *Gateways) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Gateways.Marshal(b, m, deterministic)
}
func (m *Gateways) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gateways.Merge(m, src)
}
func (m *Gateways) XXX_Size() int {
	return xxx_messageInfo_Gateways.Size(m)
}
func (m *Gateways) XXX_DiscardUnknown() {
	xxx_messageInfo_Gateways.DiscardUnknown(m)
}

var xxx_messageInfo_Gateways proto.InternalMessageInfo

func (m *Gateways) GetGateways() []*Gateway {
	if m != nil {
		return m.Gateways
	}
	return nil
}

type GetGatewayRequest struct {
	GatewayIdentifiers `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,proto3,embedded=gateway_ids" json:"gateway_ids"`
	// The names of the gateway fields that should be returned.
	FieldMask            *types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetGatewayRequest) Reset()      { *m = GetGatewayRequest{} }
func (*GetGatewayRequest) ProtoMessage() {}
func (*GetGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{7}
}
func (m *GetGatewayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGatewayRequest.Unmarshal(m, b)
}
func (m *GetGatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGatewayRequest.Marshal(b, m, deterministic)
}
func (m *GetGatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGatewayRequest.Merge(m, src)
}
func (m *GetGatewayRequest) XXX_Size() int {
	return xxx_messageInfo_GetGatewayRequest.Size(m)
}
func (m *GetGatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGatewayRequest proto.InternalMessageInfo

func (m *GetGatewayRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

type GetGatewayIdentifiersForEUIRequest struct {
	Eui                  go_thethings_network_lorawan_stack_v3_pkg_types.EUI64 `protobuf:"bytes,1,opt,name=eui,proto3,customtype=go.thethings.network/lorawan-stack/v3/pkg/types.EUI64" json:"eui"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *GetGatewayIdentifiersForEUIRequest) Reset()      { *m = GetGatewayIdentifiersForEUIRequest{} }
func (*GetGatewayIdentifiersForEUIRequest) ProtoMessage() {}
func (*GetGatewayIdentifiersForEUIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{8}
}
func (m *GetGatewayIdentifiersForEUIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGatewayIdentifiersForEUIRequest.Unmarshal(m, b)
}
func (m *GetGatewayIdentifiersForEUIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGatewayIdentifiersForEUIRequest.Marshal(b, m, deterministic)
}
func (m *GetGatewayIdentifiersForEUIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGatewayIdentifiersForEUIRequest.Merge(m, src)
}
func (m *GetGatewayIdentifiersForEUIRequest) XXX_Size() int {
	return xxx_messageInfo_GetGatewayIdentifiersForEUIRequest.Size(m)
}
func (m *GetGatewayIdentifiersForEUIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGatewayIdentifiersForEUIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGatewayIdentifiersForEUIRequest proto.InternalMessageInfo

type ListGatewaysRequest struct {
	// By default we list all gateways the caller has rights on.
	// Set the user or the organization (not both) to instead list the gateways
	// where the user or organization is collaborator on.
	Collaborator *OrganizationOrUserIdentifiers `protobuf:"bytes,1,opt,name=collaborator,proto3" json:"collaborator,omitempty"`
	// The names of the gateway fields that should be returned.
	FieldMask *types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	// Order the results by this field path (must be present in the field mask).
	// Default ordering is by ID. Prepend with a minus (-) to reverse the order.
	Order string `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page uint32 `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	// Only return recently deleted gateways.
	Deleted              bool     `protobuf:"varint,6,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListGatewaysRequest) Reset()      { *m = ListGatewaysRequest{} }
func (*ListGatewaysRequest) ProtoMessage() {}
func (*ListGatewaysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{9}
}
func (m *ListGatewaysRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListGatewaysRequest.Unmarshal(m, b)
}
func (m *ListGatewaysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListGatewaysRequest.Marshal(b, m, deterministic)
}
func (m *ListGatewaysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGatewaysRequest.Merge(m, src)
}
func (m *ListGatewaysRequest) XXX_Size() int {
	return xxx_messageInfo_ListGatewaysRequest.Size(m)
}
func (m *ListGatewaysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGatewaysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListGatewaysRequest proto.InternalMessageInfo

func (m *ListGatewaysRequest) GetCollaborator() *OrganizationOrUserIdentifiers {
	if m != nil {
		return m.Collaborator
	}
	return nil
}

func (m *ListGatewaysRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

func (m *ListGatewaysRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *ListGatewaysRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListGatewaysRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListGatewaysRequest) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

type CreateGatewayRequest struct {
	Gateway `protobuf:"bytes,1,opt,name=gateway,proto3,embedded=gateway" json:"gateway"`
	// Collaborator to grant all rights on the newly created gateway.
	Collaborator         OrganizationOrUserIdentifiers `protobuf:"bytes,2,opt,name=collaborator,proto3" json:"collaborator"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CreateGatewayRequest) Reset()      { *m = CreateGatewayRequest{} }
func (*CreateGatewayRequest) ProtoMessage() {}
func (*CreateGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{10}
}
func (m *CreateGatewayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateGatewayRequest.Unmarshal(m, b)
}
func (m *CreateGatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateGatewayRequest.Marshal(b, m, deterministic)
}
func (m *CreateGatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGatewayRequest.Merge(m, src)
}
func (m *CreateGatewayRequest) XXX_Size() int {
	return xxx_messageInfo_CreateGatewayRequest.Size(m)
}
func (m *CreateGatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGatewayRequest proto.InternalMessageInfo

func (m *CreateGatewayRequest) GetCollaborator() OrganizationOrUserIdentifiers {
	if m != nil {
		return m.Collaborator
	}
	return OrganizationOrUserIdentifiers{}
}

type UpdateGatewayRequest struct {
	Gateway `protobuf:"bytes,1,opt,name=gateway,proto3,embedded=gateway" json:"gateway"`
	// The names of the gateway fields that should be updated.
	FieldMask            *types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpdateGatewayRequest) Reset()      { *m = UpdateGatewayRequest{} }
func (*UpdateGatewayRequest) ProtoMessage() {}
func (*UpdateGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{11}
}
func (m *UpdateGatewayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateGatewayRequest.Unmarshal(m, b)
}
func (m *UpdateGatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateGatewayRequest.Marshal(b, m, deterministic)
}
func (m *UpdateGatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGatewayRequest.Merge(m, src)
}
func (m *UpdateGatewayRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateGatewayRequest.Size(m)
}
func (m *UpdateGatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGatewayRequest proto.InternalMessageInfo

func (m *UpdateGatewayRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

type ListGatewayAPIKeysRequest struct {
	GatewayIdentifiers `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,proto3,embedded=gateway_ids" json:"gateway_ids"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page                 uint32   `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListGatewayAPIKeysRequest) Reset()      { *m = ListGatewayAPIKeysRequest{} }
func (*ListGatewayAPIKeysRequest) ProtoMessage() {}
func (*ListGatewayAPIKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{12}
}
func (m *ListGatewayAPIKeysRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListGatewayAPIKeysRequest.Unmarshal(m, b)
}
func (m *ListGatewayAPIKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListGatewayAPIKeysRequest.Marshal(b, m, deterministic)
}
func (m *ListGatewayAPIKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGatewayAPIKeysRequest.Merge(m, src)
}
func (m *ListGatewayAPIKeysRequest) XXX_Size() int {
	return xxx_messageInfo_ListGatewayAPIKeysRequest.Size(m)
}
func (m *ListGatewayAPIKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGatewayAPIKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListGatewayAPIKeysRequest proto.InternalMessageInfo

func (m *ListGatewayAPIKeysRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListGatewayAPIKeysRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type GetGatewayAPIKeyRequest struct {
	GatewayIdentifiers `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,proto3,embedded=gateway_ids" json:"gateway_ids"`
	// Unique public identifier for the API key.
	KeyId                string   `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetGatewayAPIKeyRequest) Reset()      { *m = GetGatewayAPIKeyRequest{} }
func (*GetGatewayAPIKeyRequest) ProtoMessage() {}
func (*GetGatewayAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{13}
}
func (m *GetGatewayAPIKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGatewayAPIKeyRequest.Unmarshal(m, b)
}
func (m *GetGatewayAPIKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGatewayAPIKeyRequest.Marshal(b, m, deterministic)
}
func (m *GetGatewayAPIKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGatewayAPIKeyRequest.Merge(m, src)
}
func (m *GetGatewayAPIKeyRequest) XXX_Size() int {
	return xxx_messageInfo_GetGatewayAPIKeyRequest.Size(m)
}
func (m *GetGatewayAPIKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGatewayAPIKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGatewayAPIKeyRequest proto.InternalMessageInfo

func (m *GetGatewayAPIKeyRequest) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

type CreateGatewayAPIKeyRequest struct {
	GatewayIdentifiers   `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,proto3,embedded=gateway_ids" json:"gateway_ids"`
	Name                 string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Rights               []Right    `protobuf:"varint,3,rep,packed,name=rights,proto3,enum=ttn.lorawan.v3.Right" json:"rights,omitempty"`
	ExpiresAt            *time.Time `protobuf:"bytes,4,opt,name=expires_at,json=expiresAt,proto3,stdtime" json:"expires_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CreateGatewayAPIKeyRequest) Reset()      { *m = CreateGatewayAPIKeyRequest{} }
func (*CreateGatewayAPIKeyRequest) ProtoMessage() {}
func (*CreateGatewayAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{14}
}
func (m *CreateGatewayAPIKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateGatewayAPIKeyRequest.Unmarshal(m, b)
}
func (m *CreateGatewayAPIKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateGatewayAPIKeyRequest.Marshal(b, m, deterministic)
}
func (m *CreateGatewayAPIKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGatewayAPIKeyRequest.Merge(m, src)
}
func (m *CreateGatewayAPIKeyRequest) XXX_Size() int {
	return xxx_messageInfo_CreateGatewayAPIKeyRequest.Size(m)
}
func (m *CreateGatewayAPIKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGatewayAPIKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGatewayAPIKeyRequest proto.InternalMessageInfo

func (m *CreateGatewayAPIKeyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateGatewayAPIKeyRequest) GetRights() []Right {
	if m != nil {
		return m.Rights
	}
	return nil
}

func (m *CreateGatewayAPIKeyRequest) GetExpiresAt() *time.Time {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

type UpdateGatewayAPIKeyRequest struct {
	GatewayIdentifiers `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,proto3,embedded=gateway_ids" json:"gateway_ids"`
	APIKey             `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3,embedded=api_key" json:"api_key"`
	// The names of the api key fields that should be updated.
	FieldMask            *types.FieldMask `protobuf:"bytes,3,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpdateGatewayAPIKeyRequest) Reset()      { *m = UpdateGatewayAPIKeyRequest{} }
func (*UpdateGatewayAPIKeyRequest) ProtoMessage() {}
func (*UpdateGatewayAPIKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{15}
}
func (m *UpdateGatewayAPIKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateGatewayAPIKeyRequest.Unmarshal(m, b)
}
func (m *UpdateGatewayAPIKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateGatewayAPIKeyRequest.Marshal(b, m, deterministic)
}
func (m *UpdateGatewayAPIKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateGatewayAPIKeyRequest.Merge(m, src)
}
func (m *UpdateGatewayAPIKeyRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateGatewayAPIKeyRequest.Size(m)
}
func (m *UpdateGatewayAPIKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateGatewayAPIKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateGatewayAPIKeyRequest proto.InternalMessageInfo

func (m *UpdateGatewayAPIKeyRequest) GetFieldMask() *types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return nil
}

type ListGatewayCollaboratorsRequest struct {
	GatewayIdentifiers `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,proto3,embedded=gateway_ids" json:"gateway_ids"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page                 uint32   `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListGatewayCollaboratorsRequest) Reset()      { *m = ListGatewayCollaboratorsRequest{} }
func (*ListGatewayCollaboratorsRequest) ProtoMessage() {}
func (*ListGatewayCollaboratorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{16}
}
func (m *ListGatewayCollaboratorsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListGatewayCollaboratorsRequest.Unmarshal(m, b)
}
func (m *ListGatewayCollaboratorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListGatewayCollaboratorsRequest.Marshal(b, m, deterministic)
}
func (m *ListGatewayCollaboratorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListGatewayCollaboratorsRequest.Merge(m, src)
}
func (m *ListGatewayCollaboratorsRequest) XXX_Size() int {
	return xxx_messageInfo_ListGatewayCollaboratorsRequest.Size(m)
}
func (m *ListGatewayCollaboratorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListGatewayCollaboratorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListGatewayCollaboratorsRequest proto.InternalMessageInfo

func (m *ListGatewayCollaboratorsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListGatewayCollaboratorsRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type GetGatewayCollaboratorRequest struct {
	GatewayIdentifiers            `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,proto3,embedded=gateway_ids" json:"gateway_ids"`
	OrganizationOrUserIdentifiers `protobuf:"bytes,2,opt,name=collaborator,proto3,embedded=collaborator" json:"collaborator"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *GetGatewayCollaboratorRequest) Reset()      { *m = GetGatewayCollaboratorRequest{} }
func (*GetGatewayCollaboratorRequest) ProtoMessage() {}
func (*GetGatewayCollaboratorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{17}
}
func (m *GetGatewayCollaboratorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGatewayCollaboratorRequest.Unmarshal(m, b)
}
func (m *GetGatewayCollaboratorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGatewayCollaboratorRequest.Marshal(b, m, deterministic)
}
func (m *GetGatewayCollaboratorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGatewayCollaboratorRequest.Merge(m, src)
}
func (m *GetGatewayCollaboratorRequest) XXX_Size() int {
	return xxx_messageInfo_GetGatewayCollaboratorRequest.Size(m)
}
func (m *GetGatewayCollaboratorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGatewayCollaboratorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGatewayCollaboratorRequest proto.InternalMessageInfo

type SetGatewayCollaboratorRequest struct {
	GatewayIdentifiers   `protobuf:"bytes,1,opt,name=gateway_ids,json=gatewayIds,proto3,embedded=gateway_ids" json:"gateway_ids"`
	Collaborator         Collaborator `protobuf:"bytes,2,opt,name=collaborator,proto3" json:"collaborator"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SetGatewayCollaboratorRequest) Reset()      { *m = SetGatewayCollaboratorRequest{} }
func (*SetGatewayCollaboratorRequest) ProtoMessage() {}
func (*SetGatewayCollaboratorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{18}
}
func (m *SetGatewayCollaboratorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetGatewayCollaboratorRequest.Unmarshal(m, b)
}
func (m *SetGatewayCollaboratorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetGatewayCollaboratorRequest.Marshal(b, m, deterministic)
}
func (m *SetGatewayCollaboratorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetGatewayCollaboratorRequest.Merge(m, src)
}
func (m *SetGatewayCollaboratorRequest) XXX_Size() int {
	return xxx_messageInfo_SetGatewayCollaboratorRequest.Size(m)
}
func (m *SetGatewayCollaboratorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetGatewayCollaboratorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetGatewayCollaboratorRequest proto.InternalMessageInfo

func (m *SetGatewayCollaboratorRequest) GetCollaborator() Collaborator {
	if m != nil {
		return m.Collaborator
	}
	return Collaborator{}
}

// GatewayAntenna is the message that defines a gateway antenna.
type GatewayAntenna struct {
	// Antenna gain relative to the gateway, in dBi.
	Gain float32 `protobuf:"fixed32,1,opt,name=gain,proto3" json:"gain,omitempty"`
	// location is the antenna's location.
	Location             *Location               `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Attributes           map[string]string       `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Placement            GatewayAntennaPlacement `protobuf:"varint,4,opt,name=placement,proto3,enum=ttn.lorawan.v3.GatewayAntennaPlacement" json:"placement,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GatewayAntenna) Reset()      { *m = GatewayAntenna{} }
func (*GatewayAntenna) ProtoMessage() {}
func (*GatewayAntenna) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{19}
}
func (m *GatewayAntenna) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayAntenna.Unmarshal(m, b)
}
func (m *GatewayAntenna) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayAntenna.Marshal(b, m, deterministic)
}
func (m *GatewayAntenna) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayAntenna.Merge(m, src)
}
func (m *GatewayAntenna) XXX_Size() int {
	return xxx_messageInfo_GatewayAntenna.Size(m)
}
func (m *GatewayAntenna) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayAntenna.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayAntenna proto.InternalMessageInfo

func (m *GatewayAntenna) GetGain() float32 {
	if m != nil {
		return m.Gain
	}
	return 0
}

func (m *GatewayAntenna) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GatewayAntenna) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *GatewayAntenna) GetPlacement() GatewayAntennaPlacement {
	if m != nil {
		return m.Placement
	}
	return GatewayAntennaPlacement_PLACEMENT_UNKNOWN
}

type GatewayStatus struct {
	// Current time of the gateway
	Time time.Time `protobuf:"bytes,1,opt,name=time,proto3,stdtime" json:"time"`
	// Boot time of the gateway
	// - can be left out to save bandwidth; old value will be kept
	BootTime time.Time `protobuf:"bytes,2,opt,name=boot_time,json=bootTime,proto3,stdtime" json:"boot_time"`
	// Versions of gateway subsystems
	// - each field can be left out to save bandwidth; old value will be kept
	// - map keys are written in snake_case
	// - for example:
	//     firmware: "2.0.4"
	//     forwarder: "v2-3.3.1"
	//     fpga: "48"
	//     dsp: "27"
	//     hal: "v2-3.5.0"
	Versions map[string]string `protobuf:"bytes,3,rep,name=versions,proto3" json:"versions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Location of each gateway's antenna
	// - if left out, server uses registry-set location as fallback
	AntennaLocations []*Location `protobuf:"bytes,4,rep,name=antenna_locations,json=antennaLocations,proto3" json:"antenna_locations,omitempty"`
	// IP addresses of this gateway.
	// Repeated addresses can be used to communicate addresses of multiple interfaces (LAN, Public IP, ...).
	IP []string `protobuf:"bytes,5,rep,name=ip,proto3" json:"ip,omitempty"`
	// Metrics
	// - can be used for forwarding gateway metrics such as temperatures or performance metrics
	// - map keys are written in snake_case
	Metrics map[string]float32 `protobuf:"bytes,6,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	// Advanced metadata fields
	// - can be used for advanced information or experimental features that are not yet formally defined in the API
	// - field names are written in snake_case
	Advanced             *types.Struct `protobuf:"bytes,99,opt,name=advanced,proto3" json:"advanced,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GatewayStatus) Reset()      { *m = GatewayStatus{} }
func (*GatewayStatus) ProtoMessage() {}
func (*GatewayStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{20}
}
func (m *GatewayStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayStatus.Unmarshal(m, b)
}
func (m *GatewayStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayStatus.Marshal(b, m, deterministic)
}
func (m *GatewayStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayStatus.Merge(m, src)
}
func (m *GatewayStatus) XXX_Size() int {
	return xxx_messageInfo_GatewayStatus.Size(m)
}
func (m *GatewayStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayStatus.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayStatus proto.InternalMessageInfo

func (m *GatewayStatus) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func (m *GatewayStatus) GetBootTime() time.Time {
	if m != nil {
		return m.BootTime
	}
	return time.Time{}
}

func (m *GatewayStatus) GetVersions() map[string]string {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *GatewayStatus) GetAntennaLocations() []*Location {
	if m != nil {
		return m.AntennaLocations
	}
	return nil
}

func (m *GatewayStatus) GetIP() []string {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *GatewayStatus) GetMetrics() map[string]float32 {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *GatewayStatus) GetAdvanced() *types.Struct {
	if m != nil {
		return m.Advanced
	}
	return nil
}

// Connection stats as monitored by the Gateway Server.
type GatewayConnectionStats struct {
	ConnectedAt            *time.Time                             `protobuf:"bytes,1,opt,name=connected_at,json=connectedAt,proto3,stdtime" json:"connected_at,omitempty"`
	Protocol               string                                 `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	LastStatusReceivedAt   *time.Time                             `protobuf:"bytes,3,opt,name=last_status_received_at,json=lastStatusReceivedAt,proto3,stdtime" json:"last_status_received_at,omitempty"`
	LastStatus             *GatewayStatus                         `protobuf:"bytes,4,opt,name=last_status,json=lastStatus,proto3" json:"last_status,omitempty"`
	LastUplinkReceivedAt   *time.Time                             `protobuf:"bytes,5,opt,name=last_uplink_received_at,json=lastUplinkReceivedAt,proto3,stdtime" json:"last_uplink_received_at,omitempty"`
	UplinkCount            uint64                                 `protobuf:"varint,6,opt,name=uplink_count,json=uplinkCount,proto3" json:"uplink_count,omitempty"`
	LastDownlinkReceivedAt *time.Time                             `protobuf:"bytes,7,opt,name=last_downlink_received_at,json=lastDownlinkReceivedAt,proto3,stdtime" json:"last_downlink_received_at,omitempty"`
	DownlinkCount          uint64                                 `protobuf:"varint,8,opt,name=downlink_count,json=downlinkCount,proto3" json:"downlink_count,omitempty"`
	RoundTripTimes         *GatewayConnectionStats_RoundTripTimes `protobuf:"bytes,9,opt,name=round_trip_times,json=roundTripTimes,proto3" json:"round_trip_times,omitempty"`
	// Statistics for each sub band.
	SubBands             []*GatewayConnectionStats_SubBand `protobuf:"bytes,10,rep,name=sub_bands,json=subBands,proto3" json:"sub_bands,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *GatewayConnectionStats) Reset()      { *m = GatewayConnectionStats{} }
func (*GatewayConnectionStats) ProtoMessage() {}
func (*GatewayConnectionStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{21}
}
func (m *GatewayConnectionStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayConnectionStats.Unmarshal(m, b)
}
func (m *GatewayConnectionStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayConnectionStats.Marshal(b, m, deterministic)
}
func (m *GatewayConnectionStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayConnectionStats.Merge(m, src)
}
func (m *GatewayConnectionStats) XXX_Size() int {
	return xxx_messageInfo_GatewayConnectionStats.Size(m)
}
func (m *GatewayConnectionStats) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayConnectionStats.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayConnectionStats proto.InternalMessageInfo

func (m *GatewayConnectionStats) GetConnectedAt() *time.Time {
	if m != nil {
		return m.ConnectedAt
	}
	return nil
}

func (m *GatewayConnectionStats) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *GatewayConnectionStats) GetLastStatusReceivedAt() *time.Time {
	if m != nil {
		return m.LastStatusReceivedAt
	}
	return nil
}

func (m *GatewayConnectionStats) GetLastStatus() *GatewayStatus {
	if m != nil {
		return m.LastStatus
	}
	return nil
}

func (m *GatewayConnectionStats) GetLastUplinkReceivedAt() *time.Time {
	if m != nil {
		return m.LastUplinkReceivedAt
	}
	return nil
}

func (m *GatewayConnectionStats) GetUplinkCount() uint64 {
	if m != nil {
		return m.UplinkCount
	}
	return 0
}

func (m *GatewayConnectionStats) GetLastDownlinkReceivedAt() *time.Time {
	if m != nil {
		return m.LastDownlinkReceivedAt
	}
	return nil
}

func (m *GatewayConnectionStats) GetDownlinkCount() uint64 {
	if m != nil {
		return m.DownlinkCount
	}
	return 0
}

func (m *GatewayConnectionStats) GetRoundTripTimes() *GatewayConnectionStats_RoundTripTimes {
	if m != nil {
		return m.RoundTripTimes
	}
	return nil
}

func (m *GatewayConnectionStats) GetSubBands() []*GatewayConnectionStats_SubBand {
	if m != nil {
		return m.SubBands
	}
	return nil
}

type GatewayConnectionStats_RoundTripTimes struct {
	Min                  time.Duration `protobuf:"bytes,1,opt,name=min,proto3,stdduration" json:"min"`
	Max                  time.Duration `protobuf:"bytes,2,opt,name=max,proto3,stdduration" json:"max"`
	Median               time.Duration `protobuf:"bytes,3,opt,name=median,proto3,stdduration" json:"median"`
	Count                uint32        `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GatewayConnectionStats_RoundTripTimes) Reset()      { *m = GatewayConnectionStats_RoundTripTimes{} }
func (*GatewayConnectionStats_RoundTripTimes) ProtoMessage() {}
func (*GatewayConnectionStats_RoundTripTimes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{21, 0}
}
func (m *GatewayConnectionStats_RoundTripTimes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayConnectionStats_RoundTripTimes.Unmarshal(m, b)
}
func (m *GatewayConnectionStats_RoundTripTimes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayConnectionStats_RoundTripTimes.Marshal(b, m, deterministic)
}
func (m *GatewayConnectionStats_RoundTripTimes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayConnectionStats_RoundTripTimes.Merge(m, src)
}
func (m *GatewayConnectionStats_RoundTripTimes) XXX_Size() int {
	return xxx_messageInfo_GatewayConnectionStats_RoundTripTimes.Size(m)
}
func (m *GatewayConnectionStats_RoundTripTimes) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayConnectionStats_RoundTripTimes.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayConnectionStats_RoundTripTimes proto.InternalMessageInfo

func (m *GatewayConnectionStats_RoundTripTimes) GetMin() time.Duration {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *GatewayConnectionStats_RoundTripTimes) GetMax() time.Duration {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *GatewayConnectionStats_RoundTripTimes) GetMedian() time.Duration {
	if m != nil {
		return m.Median
	}
	return 0
}

func (m *GatewayConnectionStats_RoundTripTimes) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GatewayConnectionStats_SubBand struct {
	MinFrequency             uint64   `protobuf:"varint,1,opt,name=min_frequency,json=minFrequency,proto3" json:"min_frequency,omitempty"`
	MaxFrequency             uint64   `protobuf:"varint,2,opt,name=max_frequency,json=maxFrequency,proto3" json:"max_frequency,omitempty"`
	DownlinkUtilizationLimit float32  `protobuf:"fixed32,3,opt,name=downlink_utilization_limit,json=downlinkUtilizationLimit,proto3" json:"downlink_utilization_limit,omitempty"`
	DownlinkUtilization      float32  `protobuf:"fixed32,4,opt,name=downlink_utilization,json=downlinkUtilization,proto3" json:"downlink_utilization,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *GatewayConnectionStats_SubBand) Reset()      { *m = GatewayConnectionStats_SubBand{} }
func (*GatewayConnectionStats_SubBand) ProtoMessage() {}
func (*GatewayConnectionStats_SubBand) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df6bae1ac946b39, []int{21, 1}
}
func (m *GatewayConnectionStats_SubBand) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayConnectionStats_SubBand.Unmarshal(m, b)
}
func (m *GatewayConnectionStats_SubBand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayConnectionStats_SubBand.Marshal(b, m, deterministic)
}
func (m *GatewayConnectionStats_SubBand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayConnectionStats_SubBand.Merge(m, src)
}
func (m *GatewayConnectionStats_SubBand) XXX_Size() int {
	return xxx_messageInfo_GatewayConnectionStats_SubBand.Size(m)
}
func (m *GatewayConnectionStats_SubBand) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayConnectionStats_SubBand.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayConnectionStats_SubBand proto.InternalMessageInfo

func (m *GatewayConnectionStats_SubBand) GetMinFrequency() uint64 {
	if m != nil {
		return m.MinFrequency
	}
	return 0
}

func (m *GatewayConnectionStats_SubBand) GetMaxFrequency() uint64 {
	if m != nil {
		return m.MaxFrequency
	}
	return 0
}

func (m *GatewayConnectionStats_SubBand) GetDownlinkUtilizationLimit() float32 {
	if m != nil {
		return m.DownlinkUtilizationLimit
	}
	return 0
}

func (m *GatewayConnectionStats_SubBand) GetDownlinkUtilization() float32 {
	if m != nil {
		return m.DownlinkUtilization
	}
	return 0
}

func init() {
	proto.RegisterEnum("ttn.lorawan.v3.GatewayAntennaPlacement", GatewayAntennaPlacement_name, GatewayAntennaPlacement_value)
	golang_proto.RegisterEnum("ttn.lorawan.v3.GatewayAntennaPlacement", GatewayAntennaPlacement_name, GatewayAntennaPlacement_value)
	proto.RegisterType((*GatewayBrand)(nil), "ttn.lorawan.v3.GatewayBrand")
	golang_proto.RegisterType((*GatewayBrand)(nil), "ttn.lorawan.v3.GatewayBrand")
	proto.RegisterType((*GatewayModel)(nil), "ttn.lorawan.v3.GatewayModel")
	golang_proto.RegisterType((*GatewayModel)(nil), "ttn.lorawan.v3.GatewayModel")
	proto.RegisterType((*GatewayVersionIdentifiers)(nil), "ttn.lorawan.v3.GatewayVersionIdentifiers")
	golang_proto.RegisterType((*GatewayVersionIdentifiers)(nil), "ttn.lorawan.v3.GatewayVersionIdentifiers")
	proto.RegisterType((*GatewayRadio)(nil), "ttn.lorawan.v3.GatewayRadio")
	golang_proto.RegisterType((*GatewayRadio)(nil), "ttn.lorawan.v3.GatewayRadio")
	proto.RegisterType((*GatewayRadio_TxConfiguration)(nil), "ttn.lorawan.v3.GatewayRadio.TxConfiguration")
	golang_proto.RegisterType((*GatewayRadio_TxConfiguration)(nil), "ttn.lorawan.v3.GatewayRadio.TxConfiguration")
	proto.RegisterType((*GatewayClaimAuthenticationCode)(nil), "ttn.lorawan.v3.GatewayClaimAuthenticationCode")
	golang_proto.RegisterType((*GatewayClaimAuthenticationCode)(nil), "ttn.lorawan.v3.GatewayClaimAuthenticationCode")
	proto.RegisterType((*Gateway)(nil), "ttn.lorawan.v3.Gateway")
	golang_proto.RegisterType((*Gateway)(nil), "ttn.lorawan.v3.Gateway")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.Gateway.AttributesEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.Gateway.AttributesEntry")
	proto.RegisterType((*Gateway_LRFHSS)(nil), "ttn.lorawan.v3.Gateway.LRFHSS")
	golang_proto.RegisterType((*Gateway_LRFHSS)(nil), "ttn.lorawan.v3.Gateway.LRFHSS")
	proto.RegisterType((*Gateways)(nil), "ttn.lorawan.v3.Gateways")
	golang_proto.RegisterType((*Gateways)(nil), "ttn.lorawan.v3.Gateways")
	proto.RegisterType((*GetGatewayRequest)(nil), "ttn.lorawan.v3.GetGatewayRequest")
	golang_proto.RegisterType((*GetGatewayRequest)(nil), "ttn.lorawan.v3.GetGatewayRequest")
	proto.RegisterType((*GetGatewayIdentifiersForEUIRequest)(nil), "ttn.lorawan.v3.GetGatewayIdentifiersForEUIRequest")
	golang_proto.RegisterType((*GetGatewayIdentifiersForEUIRequest)(nil), "ttn.lorawan.v3.GetGatewayIdentifiersForEUIRequest")
	proto.RegisterType((*ListGatewaysRequest)(nil), "ttn.lorawan.v3.ListGatewaysRequest")
	golang_proto.RegisterType((*ListGatewaysRequest)(nil), "ttn.lorawan.v3.ListGatewaysRequest")
	proto.RegisterType((*CreateGatewayRequest)(nil), "ttn.lorawan.v3.CreateGatewayRequest")
	golang_proto.RegisterType((*CreateGatewayRequest)(nil), "ttn.lorawan.v3.CreateGatewayRequest")
	proto.RegisterType((*UpdateGatewayRequest)(nil), "ttn.lorawan.v3.UpdateGatewayRequest")
	golang_proto.RegisterType((*UpdateGatewayRequest)(nil), "ttn.lorawan.v3.UpdateGatewayRequest")
	proto.RegisterType((*ListGatewayAPIKeysRequest)(nil), "ttn.lorawan.v3.ListGatewayAPIKeysRequest")
	golang_proto.RegisterType((*ListGatewayAPIKeysRequest)(nil), "ttn.lorawan.v3.ListGatewayAPIKeysRequest")
	proto.RegisterType((*GetGatewayAPIKeyRequest)(nil), "ttn.lorawan.v3.GetGatewayAPIKeyRequest")
	golang_proto.RegisterType((*GetGatewayAPIKeyRequest)(nil), "ttn.lorawan.v3.GetGatewayAPIKeyRequest")
	proto.RegisterType((*CreateGatewayAPIKeyRequest)(nil), "ttn.lorawan.v3.CreateGatewayAPIKeyRequest")
	golang_proto.RegisterType((*CreateGatewayAPIKeyRequest)(nil), "ttn.lorawan.v3.CreateGatewayAPIKeyRequest")
	proto.RegisterType((*UpdateGatewayAPIKeyRequest)(nil), "ttn.lorawan.v3.UpdateGatewayAPIKeyRequest")
	golang_proto.RegisterType((*UpdateGatewayAPIKeyRequest)(nil), "ttn.lorawan.v3.UpdateGatewayAPIKeyRequest")
	proto.RegisterType((*ListGatewayCollaboratorsRequest)(nil), "ttn.lorawan.v3.ListGatewayCollaboratorsRequest")
	golang_proto.RegisterType((*ListGatewayCollaboratorsRequest)(nil), "ttn.lorawan.v3.ListGatewayCollaboratorsRequest")
	proto.RegisterType((*GetGatewayCollaboratorRequest)(nil), "ttn.lorawan.v3.GetGatewayCollaboratorRequest")
	golang_proto.RegisterType((*GetGatewayCollaboratorRequest)(nil), "ttn.lorawan.v3.GetGatewayCollaboratorRequest")
	proto.RegisterType((*SetGatewayCollaboratorRequest)(nil), "ttn.lorawan.v3.SetGatewayCollaboratorRequest")
	golang_proto.RegisterType((*SetGatewayCollaboratorRequest)(nil), "ttn.lorawan.v3.SetGatewayCollaboratorRequest")
	proto.RegisterType((*GatewayAntenna)(nil), "ttn.lorawan.v3.GatewayAntenna")
	golang_proto.RegisterType((*GatewayAntenna)(nil), "ttn.lorawan.v3.GatewayAntenna")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.GatewayAntenna.AttributesEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.GatewayAntenna.AttributesEntry")
	proto.RegisterType((*GatewayStatus)(nil), "ttn.lorawan.v3.GatewayStatus")
	golang_proto.RegisterType((*GatewayStatus)(nil), "ttn.lorawan.v3.GatewayStatus")
	proto.RegisterMapType((map[string]float32)(nil), "ttn.lorawan.v3.GatewayStatus.MetricsEntry")
	golang_proto.RegisterMapType((map[string]float32)(nil), "ttn.lorawan.v3.GatewayStatus.MetricsEntry")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.GatewayStatus.VersionsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.GatewayStatus.VersionsEntry")
	proto.RegisterType((*GatewayConnectionStats)(nil), "ttn.lorawan.v3.GatewayConnectionStats")
	golang_proto.RegisterType((*GatewayConnectionStats)(nil), "ttn.lorawan.v3.GatewayConnectionStats")
	proto.RegisterType((*GatewayConnectionStats_RoundTripTimes)(nil), "ttn.lorawan.v3.GatewayConnectionStats.RoundTripTimes")
	golang_proto.RegisterType((*GatewayConnectionStats_RoundTripTimes)(nil), "ttn.lorawan.v3.GatewayConnectionStats.RoundTripTimes")
	proto.RegisterType((*GatewayConnectionStats_SubBand)(nil), "ttn.lorawan.v3.GatewayConnectionStats.SubBand")
	golang_proto.RegisterType((*GatewayConnectionStats_SubBand)(nil), "ttn.lorawan.v3.GatewayConnectionStats.SubBand")
}

func init() { proto.RegisterFile("lorawan-stack/api/gateway.proto", fileDescriptor_1df6bae1ac946b39) }
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/gateway.proto", fileDescriptor_1df6bae1ac946b39)
}

var fileDescriptor_1df6bae1ac946b39 = []byte{
	// 3035 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0x4d, 0x6c, 0x1b, 0xc7,
	0xf5, 0xf7, 0x92, 0xfa, 0xa0, 0x1e, 0xf5, 0x41, 0x4d, 0x64, 0x79, 0x2d, 0xdb, 0xa2, 0xfe, 0x8c,
	0xf2, 0x8f, 0xec, 0x9a, 0x54, 0x22, 0xc7, 0x41, 0xe3, 0xd4, 0xb1, 0x49, 0xca, 0x72, 0x04, 0xcb,
	0x92, 0xb2, 0x92, 0x1a, 0x34, 0x76, 0xbc, 0x18, 0xee, 0x0e, 0xa9, 0x8d, 0x96, 0xbb, 0xec, 0xec,
	0xac, 0x2c, 0xe6, 0x0b, 0x41, 0x91, 0x22, 0x45, 0x0e, 0x45, 0x90, 0x43, 0x51, 0xa4, 0x97, 0x5c,
	0x5a, 0x14, 0x45, 0x0b, 0x14, 0x3d, 0x14, 0x3d, 0xf4, 0xd0, 0x43, 0x5b, 0xe4, 0x98, 0x43, 0x51,
	0x14, 0x2d, 0xa0, 0xb6, 0xca, 0x25, 0xed, 0xa9, 0x1f, 0x97, 0x42, 0xa7, 0x62, 0x66, 0x67, 0x97,
	0x4b, 0xea, 0xc3, 0x56, 0x1d, 0xa7, 0x3d, 0x71, 0x67, 0xe6, 0xf7, 0xde, 0xfc, 0xe6, 0xcd, 0x9b,
	0x37, 0x6f, 0x1e, 0x21, 0x6b, 0xbb, 0x14, 0xdf, 0xc5, 0x4e, 0xde, 0x63, 0xd8, 0xd8, 0x98, 0xc6,
	0x0d, 0x6b, 0xba, 0x86, 0x19, 0xb9, 0x8b, 0x9b, 0x85, 0x06, 0x75, 0x99, 0x8b, 0x06, 0x19, 0x73,
	0x0a, 0x12, 0x54, 0xd8, 0xbc, 0x30, 0x56, 0xac, 0x59, 0x6c, 0xdd, 0xaf, 0x14, 0x0c, 0xb7, 0x3e,
	0x4d, 0x9c, 0x4d, 0xb7, 0xd9, 0xa0, 0xee, 0x56, 0x73, 0x5a, 0x80, 0x8d, 0x7c, 0x8d, 0x38, 0xf9,
	0x4d, 0x6c, 0x5b, 0x26, 0x66, 0x64, 0x7a, 0xcf, 0x47, 0xa0, 0x72, 0x2c, 0x1f, 0x53, 0x51, 0x73,
	0x6b, 0x6e, 0x20, 0x5c, 0xf1, 0xab, 0xa2, 0x25, 0x1a, 0xe2, 0x4b, 0xc2, 0xc7, 0x6b, 0xae, 0x5b,
	0xb3, 0x49, 0x0b, 0x65, 0xfa, 0x14, 0x33, 0xcb, 0x75, 0xe4, 0xf8, 0x44, 0xe7, 0x78, 0xd5, 0x22,
	0xb6, 0xa9, 0xd7, 0xb1, 0xb7, 0x21, 0x11, 0xa7, 0x3b, 0x11, 0x1e, 0xa3, 0xbe, 0xc1, 0xe4, 0x68,
	0xb6, 0x73, 0x94, 0x59, 0x75, 0xe2, 0x31, 0x5c, 0x6f, 0x48, 0xc0, 0xe4, 0x5e, 0x1b, 0x19, 0xae,
	0xc3, 0xb0, 0xc1, 0x74, 0xcb, 0xa9, 0x86, 0x34, 0xcf, 0xec, 0x45, 0x11, 0xc7, 0xaf, 0x7b, 0x72,
	0xf8, 0xd1, 0xbd, 0xc3, 0x96, 0x49, 0x1c, 0x66, 0x55, 0x2d, 0x42, 0x43, 0xd0, 0xc4, 0x5e, 0x50,
	0x9d, 0x30, 0x6c, 0x62, 0x86, 0x43, 0x63, 0xec, 0x45, 0x50, 0xab, 0xb6, 0xce, 0x42, 0x0d, 0xfb,
	0xec, 0xa7, 0x47, 0x0c, 0x4a, 0x42, 0x40, 0x6e, 0x03, 0xfa, 0xaf, 0x07, 0x1b, 0x5c, 0xa2, 0xd8,
	0x31, 0xd1, 0x28, 0x24, 0x2c, 0x53, 0x55, 0x26, 0x94, 0xa9, 0xbe, 0x52, 0xcf, 0xce, 0x76, 0x36,
	0x31, 0x3f, 0xab, 0x25, 0x2c, 0x13, 0x21, 0xe8, 0x72, 0x70, 0x9d, 0xa8, 0x09, 0x3e, 0xa2, 0x89,
	0x6f, 0x74, 0x12, 0x92, 0x3e, 0xb5, 0xd5, 0xa4, 0x00, 0xf7, 0xee, 0x6c, 0x67, 0x93, 0x6b, 0xda,
	0x82, 0xc6, 0xfb, 0xd0, 0x08, 0x74, 0xdb, 0x6e, 0xcd, 0xf5, 0xd4, 0xae, 0x89, 0xe4, 0x54, 0x9f,
	0x16, 0x34, 0x72, 0x3f, 0x55, 0xa2, 0xd9, 0x6e, 0xba, 0x26, 0xb1, 0xd1, 0x32, 0xa4, 0x2a, 0x7c,
	0x5a, 0x3d, 0x9a, 0xf3, 0xe2, 0x6e, 0xe9, 0x71, 0xfa, 0x98, 0x3a, 0x39, 0x33, 0x7e, 0xe7, 0x16,
	0xce, 0xbf, 0xfa, 0x44, 0xfe, 0x99, 0x97, 0xa7, 0xae, 0x5c, 0xba, 0x95, 0x7f, 0xf9, 0x4a, 0xd8,
	0x3c, 0xfb, 0xda, 0xcc, 0xf9, 0x37, 0x26, 0x3f, 0x56, 0x94, 0x9d, 0xed, 0x6c, 0xaf, 0x20, 0x3d,
	0x3f, 0xab, 0xf5, 0x0a, 0x35, 0xf3, 0x26, 0xba, 0x2a, 0xf8, 0x0b, 0x96, 0xa5, 0x27, 0x8e, 0xa4,
	0xab, 0x73, 0xa5, 0xc9, 0xd6, 0x4a, 0x73, 0x3f, 0x4a, 0xc0, 0x49, 0x49, 0xfc, 0xcb, 0x84, 0x7a,
	0x96, 0xeb, 0xcc, 0xb7, 0x36, 0xeb, 0x21, 0xac, 0x62, 0x19, 0x52, 0x75, 0x6e, 0x20, 0x3d, 0x5a,
	0xcb, 0x11, 0x35, 0x0a, 0xf3, 0x72, 0x8d, 0x42, 0xcd, 0xbc, 0x89, 0x66, 0x20, 0xb3, 0x8e, 0xa9,
	0x79, 0x17, 0x53, 0xa2, 0x6f, 0x06, 0x4b, 0x08, 0x37, 0x6e, 0xb7, 0xd4, 0x45, 0x13, 0xea, 0x84,
	0x36, 0x14, 0x02, 0xe4, 0x12, 0xb9, 0x4c, 0xd5, 0xa2, 0xf5, 0x36, 0x99, 0xae, 0x0e, 0x99, 0x10,
	0x20, 0x65, 0x2e, 0x75, 0xfd, 0xec, 0xc3, 0xac, 0x92, 0xfb, 0x47, 0x22, 0xda, 0x68, 0x0d, 0x9b,
	0x96, 0x8b, 0x46, 0xa1, 0x87, 0x38, 0xb8, 0x62, 0x13, 0x61, 0xa0, 0x94, 0x26, 0x5b, 0xe8, 0x14,
	0xf4, 0x19, 0xeb, 0x56, 0x43, 0x67, 0xcd, 0x46, 0xe8, 0x5b, 0x29, 0xde, 0xb1, 0xda, 0x6c, 0x10,
	0x74, 0x1a, 0xfa, 0xaa, 0x94, 0x7c, 0xd5, 0x27, 0x8e, 0xd1, 0x14, 0x64, 0xbb, 0xb4, 0x56, 0x07,
	0x9a, 0x86, 0x34, 0xf5, 0x3c, 0x4b, 0x77, 0xab, 0x55, 0x8f, 0x30, 0x41, 0x2c, 0x51, 0x1a, 0xdc,
	0xd9, 0xce, 0x82, 0xb6, 0xb2, 0x32, 0xbf, 0x24, 0x7a, 0x35, 0xe0, 0x90, 0xe0, 0x1b, 0xbd, 0x08,
	0x19, 0xb6, 0xa5, 0x1b, 0xae, 0x53, 0xb5, 0x6a, 0x32, 0x64, 0xa8, 0xdd, 0x13, 0xca, 0x54, 0x7a,
	0xe6, 0x7c, 0xa1, 0x3d, 0xaa, 0x15, 0xe2, 0xdc, 0x0b, 0xab, 0x5b, 0xe5, 0xb8, 0x8c, 0x36, 0xc4,
	0xda, 0x3b, 0xc6, 0xde, 0x56, 0x60, 0xa8, 0x03, 0x84, 0x1e, 0x85, 0x81, 0xba, 0xe5, 0xe8, 0x2d,
	0xfe, 0x8a, 0xe0, 0xdf, 0x5f, 0xb7, 0x9c, 0xb9, 0x68, 0x09, 0x1c, 0x84, 0xb7, 0x62, 0xa0, 0x84,
	0x04, 0xe1, 0xad, 0x16, 0xe8, 0x71, 0x18, 0x72, 0x5c, 0x66, 0xac, 0xeb, 0x9d, 0xb6, 0x18, 0x14,
	0xdd, 0x11, 0x30, 0xf7, 0x1b, 0x05, 0xc6, 0x25, 0xf1, 0xb2, 0x8d, 0xad, 0x7a, 0xd1, 0x67, 0xeb,
	0xdc, 0x49, 0x0d, 0xc1, 0xa8, 0xec, 0x9a, 0x04, 0x15, 0xa0, 0x27, 0x38, 0xfe, 0x82, 0x4e, 0x7a,
	0x66, 0xb4, 0x73, 0xe1, 0x2b, 0x62, 0x54, 0x93, 0x28, 0x74, 0x05, 0x40, 0x04, 0x6b, 0xbd, 0x4a,
	0xdd, 0xba, 0x60, 0x97, 0x9e, 0x19, 0x2b, 0x04, 0x01, 0xb2, 0x10, 0x06, 0xc8, 0xc2, 0x6a, 0x18,
	0x20, 0x4b, 0x5d, 0xef, 0xfd, 0x31, 0xab, 0x68, 0x7d, 0x42, 0x66, 0x8e, 0xba, 0x75, 0xf4, 0x2c,
	0xa4, 0x02, 0x05, 0xcc, 0x15, 0xac, 0xef, 0x47, 0xbc, 0x57, 0x48, 0xac, 0xba, 0xd2, 0x97, 0x7e,
	0x3b, 0x0c, 0xbd, 0x72, 0x59, 0x68, 0x0e, 0x92, 0x96, 0xe9, 0x49, 0xf2, 0xb9, 0x03, 0x76, 0x2d,
	0x76, 0x34, 0x4b, 0x99, 0xdd, 0x52, 0xf7, 0xbb, 0x4a, 0x22, 0xa3, 0x7c, 0xb4, 0x9d, 0x3d, 0xf6,
	0xf1, 0x76, 0x56, 0xd1, 0xb8, 0x02, 0x54, 0x06, 0x30, 0x28, 0xc1, 0x8c, 0x98, 0x3a, 0x66, 0xf7,
	0xb1, 0xae, 0x14, 0x17, 0x0f, 0xd6, 0x26, 0xe5, 0x8a, 0x8c, 0x2b, 0xf1, 0x1b, 0x66, 0xa8, 0x24,
	0x79, 0x14, 0x25, 0x52, 0xae, 0x28, 0x2c, 0x6c, 0x12, 0x9b, 0x48, 0x25, 0x63, 0xf7, 0x6b, 0x61,
	0x29, 0x53, 0x64, 0xe8, 0x94, 0x0c, 0x57, 0x6d, 0x07, 0x73, 0x46, 0x46, 0xe8, 0x73, 0x90, 0x36,
	0x89, 0x67, 0x50, 0xab, 0x11, 0x79, 0x7b, 0x5f, 0x29, 0xb5, 0x5b, 0xea, 0xa6, 0x49, 0xf5, 0xe3,
	0x21, 0x2d, 0x3e, 0x88, 0xde, 0x04, 0xc0, 0x8c, 0x51, 0xab, 0xe2, 0x33, 0xe2, 0xa9, 0x3d, 0x13,
	0xc9, 0xa9, 0xf4, 0xcc, 0xe3, 0x07, 0x98, 0xb8, 0x50, 0x8c, 0x90, 0xd7, 0x1c, 0x46, 0x9b, 0x3c,
	0x3c, 0xcd, 0x7c, 0xa0, 0x4c, 0x67, 0x20, 0x37, 0x49, 0x73, 0xf7, 0x8e, 0x52, 0xe7, 0x38, 0x81,
	0x8f, 0x14, 0x2d, 0x36, 0x23, 0x7a, 0x1e, 0xfa, 0xe3, 0xd7, 0xa8, 0xda, 0x2b, 0x18, 0x9c, 0xea,
	0x64, 0x50, 0x0e, 0x30, 0xf3, 0x4e, 0xd5, 0x15, 0x2b, 0x79, 0x5f, 0x49, 0x64, 0x40, 0x4b, 0x1b,
	0xad, 0x6e, 0x74, 0x1b, 0xd2, 0x32, 0x5c, 0xe9, 0xdc, 0x5b, 0x52, 0xc2, 0xa8, 0x67, 0x0f, 0x58,
	0xca, 0xde, 0x78, 0xbe, 0x8f, 0xd3, 0xc0, 0x66, 0x88, 0xf2, 0xd0, 0xaf, 0x14, 0x18, 0x95, 0x39,
	0x91, 0xee, 0x11, 0xba, 0x49, 0xa8, 0x8e, 0x4d, 0x93, 0x12, 0xcf, 0x53, 0xfb, 0x84, 0x7d, 0xbf,
	0xa9, 0xec, 0x96, 0xde, 0x55, 0xe8, 0x3b, 0xca, 0xcc, 0xdb, 0xca, 0x9d, 0xa9, 0x2b, 0x97, 0xb8,
	0x05, 0x70, 0xfe, 0xd5, 0x62, 0xfe, 0x25, 0x6e, 0x80, 0xd7, 0x63, 0xdf, 0xad, 0xcf, 0xdb, 0xf9,
	0x97, 0xcf, 0xc5, 0x06, 0xce, 0xde, 0x2e, 0x9c, 0x3d, 0xc7, 0xe5, 0x8a, 0xf9, 0x97, 0xa4, 0xe1,
	0x5e, 0x8f, 0x7d, 0xb7, 0x3e, 0x85, 0x5c, 0x6b, 0xe0, 0xec, 0xd4, 0x95, 0x4b, 0x97, 0x6e, 0xf1,
	0xaf, 0xd7, 0x9e, 0x3c, 0x7f, 0xf1, 0x8d, 0xb3, 0x57, 0x26, 0x5f, 0xbf, 0x33, 0xa9, 0x8d, 0x48,
	0xba, 0x2b, 0x82, 0x6d, 0x31, 0x20, 0x8b, 0xb2, 0x90, 0xc6, 0x3e, 0x73, 0xf5, 0xc0, 0x17, 0x55,
	0x10, 0x71, 0x19, 0x78, 0xd7, 0x9a, 0xe8, 0x41, 0xd3, 0x30, 0x18, 0x8c, 0xe9, 0xc6, 0x3a, 0x76,
	0x1c, 0x62, 0xab, 0xe9, 0xb8, 0xff, 0xbc, 0xa5, 0x68, 0x03, 0xc1, 0x78, 0x39, 0x18, 0x46, 0x73,
	0x30, 0x1c, 0xc5, 0x28, 0xbd, 0x61, 0x63, 0x6e, 0x7e, 0xb5, 0x5f, 0xc8, 0x8c, 0x05, 0x7e, 0x79,
	0x75, 0x67, 0x3b, 0x3b, 0x14, 0x45, 0xac, 0x65, 0x1b, 0x3b, 0xf3, 0xb3, 0xda, 0x50, 0xb5, 0xad,
	0x83, 0xdf, 0x7e, 0x68, 0x8f, 0x1e, 0x4f, 0x1d, 0xe1, 0x99, 0x44, 0x29, 0xb7, 0x5b, 0x4a, 0xbf,
	0xaf, 0xa4, 0x32, 0xa9, 0x5c, 0xa8, 0x2f, 0xd3, 0xa1, 0xcf, 0xd3, 0x32, 0x1d, 0x0a, 0xb9, 0x6f,
	0xa5, 0xb0, 0xc3, 0x88, 0xe3, 0x60, 0x4f, 0x1d, 0x10, 0x7e, 0x35, 0x7e, 0x80, 0x3b, 0x14, 0x03,
	0x58, 0xa9, 0x5f, 0xba, 0x96, 0x38, 0xb4, 0x5a, 0x24, 0xcd, 0x43, 0xb6, 0xc7, 0x30, 0xf3, 0x3d,
	0xbd, 0xe1, 0x57, 0x6c, 0xcb, 0x50, 0x07, 0x85, 0xdd, 0xfa, 0x83, 0xce, 0x65, 0xd1, 0xc7, 0x43,
	0xb6, 0xed, 0x06, 0x61, 0x37, 0x84, 0x0d, 0x09, 0xd8, 0x60, 0xd8, 0x2d, 0x81, 0x4f, 0xc1, 0xa8,
	0x67, 0xac, 0x13, 0xd3, 0xb7, 0x89, 0x6e, 0xba, 0x77, 0x1d, 0xdb, 0x72, 0x36, 0x74, 0x9b, 0x6f,
	0x47, 0x46, 0xe0, 0x47, 0xc2, 0xd1, 0x59, 0x39, 0xb8, 0xc0, 0x37, 0xe6, 0x3c, 0x20, 0xe2, 0x54,
	0x5d, 0x6a, 0x10, 0xdd, 0xf4, 0x59, 0x53, 0x37, 0x9a, 0x86, 0x4d, 0xd4, 0x61, 0x21, 0x91, 0x91,
	0x23, 0xb3, 0x3e, 0x6b, 0x96, 0x79, 0x3f, 0x7a, 0x05, 0xd4, 0x48, 0x75, 0x03, 0xb3, 0x75, 0x7e,
	0x03, 0x7a, 0x8c, 0x62, 0xcb, 0x61, 0x2a, 0x9a, 0x50, 0xa6, 0x06, 0x67, 0xfe, 0xbf, 0xd3, 0x16,
	0xe1, 0x6c, 0xcb, 0x98, 0xad, 0x97, 0x23, 0xb4, 0xd8, 0xf8, 0xaf, 0xf1, 0x73, 0xa1, 0x8d, 0x9a,
	0xfb, 0x22, 0xd0, 0x57, 0x62, 0xeb, 0xc1, 0x4e, 0x93, 0x67, 0xce, 0xba, 0x49, 0x6c, 0xdc, 0x54,
	0x1f, 0x11, 0x87, 0xf0, 0xe4, 0x9e, 0xc8, 0x36, 0x2b, 0x2f, 0x4c, 0x11, 0x1d, 0x95, 0x6f, 0xf3,
	0xe0, 0x16, 0x2d, 0xba, 0x18, 0x68, 0x98, 0xe5, 0x0a, 0xd0, 0x65, 0x38, 0x25, 0xbd, 0x31, 0x32,
	0x2d, 0xbf, 0x94, 0xf4, 0xc0, 0xf0, 0xea, 0x71, 0xb1, 0x7a, 0x35, 0x80, 0x2c, 0x48, 0x04, 0xbf,
	0x82, 0x56, 0xc4, 0x38, 0x5a, 0x84, 0x41, 0xbb, 0xe2, 0xe9, 0xb6, 0xe3, 0xe9, 0xf2, 0x06, 0x1c,
	0x3d, 0xec, 0x06, 0x2c, 0x65, 0x76, 0xb6, 0xb3, 0xfd, 0x0b, 0xa5, 0x95, 0x85, 0xc5, 0x15, 0x79,
	0x27, 0xf6, 0xdb, 0x15, 0x6f, 0xc1, 0xf1, 0x82, 0x16, 0x7a, 0x05, 0x4e, 0x1a, 0xfc, 0x92, 0xd5,
	0x71, 0xdb, 0x2d, 0xab, 0x1b, 0xae, 0x49, 0xd4, 0x13, 0x42, 0x75, 0xe1, 0x00, 0x17, 0x3b, 0xe0,
	0x72, 0xd6, 0x4e, 0x18, 0x07, 0xdc, 0xda, 0xb3, 0x30, 0xc4, 0x30, 0xad, 0x11, 0xa6, 0x1b, 0x7e,
	0xc3, 0xd3, 0x7d, 0x6a, 0xa9, 0xaa, 0x38, 0x55, 0xa7, 0x77, 0x4b, 0x29, 0xda, 0xf3, 0x0d, 0x45,
	0x09, 0xb2, 0xbe, 0x81, 0x55, 0x81, 0x2a, 0xaf, 0x2d, 0xaf, 0xac, 0x69, 0xf3, 0xda, 0x40, 0x20,
	0x54, 0xf6, 0x1b, 0xde, 0x1a, 0xb5, 0xd0, 0x0b, 0xed, 0x5a, 0x36, 0x48, 0x53, 0x3d, 0x79, 0xa8,
	0x09, 0x86, 0xdb, 0x55, 0xde, 0x20, 0xcd, 0xb8, 0xca, 0x1b, 0xa4, 0x89, 0x9e, 0x87, 0x09, 0x7e,
	0xd2, 0x2c, 0x4a, 0xe2, 0x66, 0x20, 0x26, 0x77, 0x31, 0x87, 0x18, 0xe2, 0xce, 0x39, 0x25, 0x36,
	0x66, 0x5c, 0xe2, 0x8a, 0x71, 0x58, 0x39, 0x42, 0xa1, 0xa7, 0xa1, 0xc7, 0xa6, 0xd5, 0x75, 0xcf,
	0x53, 0x4f, 0x0b, 0x4e, 0x07, 0x1d, 0xcf, 0xc2, 0x82, 0x36, 0xf7, 0xfc, 0xca, 0x8a, 0x26, 0xd1,
	0xe8, 0x3a, 0x4c, 0x98, 0x96, 0xc7, 0x53, 0x49, 0xbd, 0x81, 0x8d, 0x0d, 0xc2, 0xf4, 0x0a, 0x75,
	0x37, 0x08, 0xd5, 0xab, 0x2e, 0xbd, 0x8b, 0xa9, 0x69, 0x39, 0x35, 0xf5, 0x8c, 0x60, 0x70, 0x46,
	0xe2, 0x96, 0x05, 0xac, 0x24, 0x50, 0x73, 0x11, 0x68, 0xec, 0x32, 0x0c, 0x75, 0xdc, 0x69, 0x28,
	0x03, 0x49, 0x6e, 0x24, 0x91, 0xd1, 0x6b, 0xfc, 0x93, 0xbf, 0x6a, 0x36, 0xb1, 0xed, 0x87, 0x99,
	0x6a, 0xd0, 0xb8, 0x94, 0xf8, 0xa2, 0x32, 0x76, 0x1e, 0x7a, 0x02, 0x66, 0x3c, 0x69, 0xf5, 0xfc,
	0x46, 0xc3, 0xa5, 0x8c, 0x98, 0x32, 0xd9, 0x6d, 0x75, 0x04, 0x29, 0x8d, 0x4c, 0x6c, 0xae, 0x40,
	0x4a, 0xae, 0xca, 0x43, 0x17, 0x20, 0x25, 0x83, 0x34, 0xcf, 0x6e, 0x78, 0x80, 0x3a, 0x71, 0x50,
	0x4e, 0x1a, 0x01, 0x73, 0xdf, 0x55, 0x60, 0xf8, 0x3a, 0x61, 0xe1, 0x00, 0x8f, 0x79, 0x1e, 0x43,
	0x6b, 0x90, 0x0e, 0xaf, 0xa7, 0x07, 0xcd, 0x95, 0xa0, 0x16, 0xa2, 0x3c, 0xf4, 0x0c, 0x40, 0xeb,
	0x21, 0x7d, 0x60, 0xca, 0x34, 0xc7, 0x21, 0x37, 0xb1, 0xb7, 0xa1, 0xf5, 0x55, 0xc3, 0xcf, 0x9c,
	0x0f, 0xb9, 0x16, 0xcd, 0xd8, 0x8c, 0x73, 0x2e, 0xbd, 0xb6, 0x36, 0x1f, 0xf2, 0x5e, 0x82, 0x24,
	0xf1, 0x2d, 0xc1, 0xb7, 0xbf, 0x74, 0x99, 0x73, 0xf8, 0xfd, 0x76, 0xf6, 0x62, 0xcd, 0x2d, 0xb0,
	0x75, 0xc2, 0xd6, 0x2d, 0xa7, 0xe6, 0x15, 0x1c, 0xc2, 0xee, 0xba, 0x74, 0x63, 0xba, 0xfd, 0x51,
	0xbb, 0x79, 0x61, 0xba, 0xb1, 0x51, 0x9b, 0xe6, 0x4f, 0x08, 0xaf, 0x70, 0x6d, 0x6d, 0xfe, 0xe9,
	0xa7, 0x34, 0xae, 0x29, 0xf7, 0xd7, 0x04, 0x3c, 0xb2, 0x60, 0x79, 0xe1, 0xc4, 0x5e, 0x38, 0xd1,
	0x0b, 0x3c, 0xd1, 0xb0, 0x6d, 0x5c, 0x71, 0x29, 0x66, 0x2e, 0x95, 0x16, 0xca, 0x77, 0x5a, 0x68,
	0x89, 0xd6, 0xb0, 0x63, 0xbd, 0x2a, 0x8e, 0xe1, 0x12, 0x5d, 0xf3, 0x08, 0x8d, 0x51, 0xd7, 0xda,
	0x54, 0x3c, 0x80, 0x71, 0xd0, 0x5d, 0xe8, 0x76, 0xa9, 0x49, 0xa8, 0x7c, 0x8d, 0xe1, 0xdd, 0xd2,
	0x1d, 0x7a, 0x5b, 0x3b, 0x16, 0xd9, 0x5e, 0xb7, 0x4c, 0x2d, 0x9d, 0x8f, 0x37, 0xc2, 0x6f, 0xe2,
	0x5b, 0x5a, 0x7f, 0x3e, 0xde, 0x12, 0x49, 0x9f, 0xd6, 0x9d, 0x17, 0x3f, 0xb1, 0x0c, 0x57, 0x4b,
	0xe7, 0x63, 0x8d, 0x60, 0x3e, 0x34, 0x0e, 0xdd, 0xb6, 0x55, 0xb7, 0x82, 0x97, 0xd3, 0x80, 0x08,
	0xee, 0xe7, 0x92, 0xea, 0xa7, 0xbd, 0x5a, 0xd0, 0xcd, 0xdf, 0xc1, 0x0d, 0x5c, 0x23, 0x22, 0x69,
	0x1c, 0xd0, 0xc4, 0x37, 0x52, 0xa1, 0x57, 0x66, 0x9e, 0x6a, 0x8f, 0x70, 0xed, 0xb0, 0x99, 0xfb,
	0xb9, 0x02, 0x23, 0x65, 0x31, 0x47, 0x87, 0x3b, 0x96, 0xa1, 0x57, 0x52, 0x94, 0x86, 0x3e, 0xc8,
	0xb1, 0xf7, 0xf1, 0xbf, 0x50, 0x12, 0xe9, 0x1d, 0x5b, 0x96, 0xf8, 0x0f, 0xb6, 0x4c, 0x5c, 0xe9,
	0x91, 0xfe, 0xf6, 0x0d, 0xcc, 0x7d, 0x4b, 0x81, 0x91, 0x20, 0xed, 0x79, 0x18, 0xf4, 0x1f, 0xe0,
	0xec, 0x7c, 0x4f, 0x81, 0x93, 0x31, 0x27, 0x2e, 0x2e, 0xcf, 0xdf, 0x20, 0x2d, 0x57, 0x7e, 0x48,
	0x67, 0x3d, 0x72, 0x8d, 0xc4, 0xe1, 0xae, 0x91, 0x6c, 0xb9, 0x46, 0xee, 0x1d, 0x05, 0x4e, 0xb4,
	0x4e, 0x79, 0xc0, 0xf3, 0x21, 0xd3, 0x3c, 0x0e, 0x3d, 0x1b, 0xa4, 0x19, 0xd5, 0x48, 0xb4, 0xee,
	0x0d, 0xd2, 0x9c, 0x37, 0x73, 0xdf, 0x49, 0xc0, 0x58, 0x9b, 0x2b, 0x7e, 0x2e, 0x64, 0x4e, 0xc5,
	0x0b, 0x64, 0x9d, 0xef, 0xb0, 0xab, 0xd0, 0x13, 0x94, 0xe5, 0xd4, 0xe4, 0x44, 0x72, 0x6a, 0x70,
	0xe6, 0x78, 0xe7, 0x74, 0x1a, 0x1f, 0x2d, 0x0d, 0xef, 0x96, 0x06, 0xdf, 0x57, 0xd2, 0x29, 0x45,
	0x55, 0x72, 0x32, 0xd3, 0x92, 0x72, 0xe8, 0x3a, 0x00, 0xd9, 0x6a, 0x58, 0x94, 0x78, 0xfc, 0x9d,
	0xd8, 0x75, 0xcf, 0x77, 0x22, 0x77, 0xf6, 0x9f, 0x28, 0x89, 0xab, 0x4a, 0xf0, 0x5e, 0x94, 0xb2,
	0x45, 0x96, 0xfb, 0xbb, 0x02, 0x63, 0x6d, 0x9e, 0xfe, 0xb9, 0x58, 0xa7, 0x08, 0xbd, 0xb8, 0x61,
	0x89, 0xa4, 0x23, 0xb1, 0x7f, 0xd2, 0x11, 0xd0, 0xd8, 0x47, 0x4d, 0x0f, 0x6e, 0x58, 0x3c, 0xd9,
	0x68, 0x3f, 0x44, 0xc9, 0xa3, 0x1c, 0xa2, 0x1f, 0x2a, 0x90, 0x8d, 0x1d, 0xa2, 0x72, 0xec, 0xe4,
	0xff, 0x2f, 0x1e, 0xa5, 0x3f, 0x28, 0x70, 0xa6, 0x75, 0x94, 0xe2, 0x6c, 0x1f, 0x32, 0x59, 0xe3,
	0xb3, 0x08, 0xb3, 0x7b, 0xa7, 0x68, 0x0f, 0xb5, 0xbf, 0x56, 0xe0, 0xcc, 0xca, 0x7f, 0x63, 0x75,
	0x8b, 0xfb, 0xae, 0xee, 0xf4, 0xde, 0x02, 0x43, 0x0b, 0x73, 0xe8, 0x9d, 0xf1, 0xaf, 0x04, 0x0c,
	0xb6, 0xbf, 0x1a, 0xf9, 0x6e, 0xd6, 0xb0, 0xe5, 0x08, 0xca, 0x09, 0x4d, 0x7c, 0xa3, 0xe7, 0x20,
	0x15, 0xbe, 0x58, 0xe4, 0x94, 0x6a, 0xe7, 0x94, 0xe1, 0x7b, 0x45, 0xb8, 0x87, 0x98, 0x4e, 0x8b,
	0x64, 0xd0, 0xd7, 0x95, 0xb6, 0xc2, 0x4c, 0x52, 0x64, 0x87, 0x85, 0xc3, 0x9f, 0xaf, 0x0f, 0xa3,
	0x3e, 0x73, 0x0d, 0xfa, 0x1a, 0x36, 0x36, 0x48, 0x9d, 0x38, 0x41, 0x00, 0x1a, 0x3c, 0xb0, 0x3c,
	0x24, 0x59, 0x2c, 0x87, 0x70, 0xad, 0x25, 0xf9, 0x80, 0x89, 0xb6, 0x4c, 0x9d, 0x7f, 0xdc, 0x0d,
	0x03, 0x72, 0x2e, 0xf9, 0xbe, 0xbb, 0x0a, 0x5d, 0xfc, 0xad, 0x28, 0x9d, 0xe5, 0xb0, 0xc8, 0x98,
	0x09, 0x22, 0x63, 0x4a, 0x89, 0xca, 0x71, 0x42, 0x12, 0x15, 0xa1, 0xaf, 0xe2, 0xba, 0x4c, 0x17,
	0x6a, 0x8e, 0x52, 0x12, 0x4c, 0x71, 0x31, 0x3e, 0x80, 0xde, 0x84, 0x94, 0x2c, 0x14, 0x85, 0xfb,
	0xf4, 0x85, 0x03, 0x2c, 0x14, 0xb0, 0x2e, 0xc8, 0xe2, 0xd3, 0x9e, 0x4d, 0x7a, 0x8c, 0x3e, 0xaa,
	0x4e, 0xce, 0x64, 0xdb, 0x36, 0x49, 0xdf, 0xbb, 0x4b, 0x41, 0x0d, 0x3e, 0x9a, 0x13, 0x2d, 0xc1,
	0xb0, 0x2c, 0x54, 0x44, 0x8f, 0xe4, 0xe0, 0x1f, 0x98, 0x7b, 0xf9, 0x9c, 0xa8, 0x74, 0x68, 0x19,
	0x29, 0x1c, 0x0e, 0x79, 0x68, 0x12, 0x12, 0x56, 0x43, 0xed, 0x16, 0x95, 0x97, 0x11, 0x59, 0x79,
	0x81, 0x5c, 0x17, 0x4d, 0x34, 0x82, 0x7f, 0x4c, 0x96, 0xb5, 0x84, 0xd5, 0x40, 0x3e, 0xf4, 0xd6,
	0x09, 0xa3, 0x96, 0x11, 0x96, 0x0d, 0xcf, 0x1d, 0xbe, 0xea, 0x9b, 0x01, 0x38, 0x58, 0xf4, 0xf4,
	0x6e, 0xe9, 0xfc, 0x07, 0xca, 0xd9, 0xfb, 0x5e, 0xb4, 0x16, 0xce, 0xc5, 0xdf, 0x4c, 0xd8, 0xdc,
	0xc4, 0x8e, 0x41, 0x4c, 0xd5, 0x90, 0xb9, 0x59, 0xe7, 0x7e, 0xad, 0x88, 0x7f, 0xf6, 0xb4, 0x08,
	0x38, 0xf6, 0x2c, 0x0c, 0xb4, 0x19, 0xfd, 0x48, 0xaf, 0xbc, 0x4b, 0xd0, 0x1f, 0xe7, 0x7e, 0x2f,
	0xd9, 0x44, 0x4c, 0x36, 0xf7, 0xcf, 0x14, 0x8c, 0x46, 0x31, 0x2f, 0x7c, 0xf7, 0x72, 0x83, 0x78,
	0xa8, 0x2c, 0x2a, 0x9f, 0xbc, 0x2b, 0xa8, 0x02, 0x2b, 0xf7, 0x59, 0x05, 0x4e, 0x47, 0x52, 0x45,
	0x86, 0xc6, 0x20, 0x15, 0xfc, 0xe9, 0xea, 0xda, 0xe1, 0x1f, 0x29, 0x61, 0x1b, 0xbd, 0x08, 0x27,
	0x6c, 0xec, 0x31, 0x59, 0x2b, 0xd1, 0x29, 0x31, 0x88, 0xb5, 0x79, 0xbf, 0x65, 0xeb, 0x60, 0xae,
	0x11, 0xae, 0x20, 0xd8, 0x3f, 0x4d, 0x8a, 0x17, 0x19, 0x7a, 0x0e, 0xd2, 0x31, 0xc5, 0x32, 0x2d,
	0x39, 0x73, 0xe8, 0xee, 0x6b, 0xd0, 0xd2, 0x14, 0x11, 0xf3, 0x1b, 0xa2, 0x3c, 0x15, 0x27, 0xd6,
	0x7d, 0x14, 0x62, 0x6b, 0x42, 0x3e, 0x46, 0xec, 0xff, 0xa0, 0x5f, 0xea, 0x34, 0x5c, 0xdf, 0x61,
	0xe2, 0xb5, 0xd2, 0xa5, 0xa5, 0x83, 0xbe, 0x32, 0xef, 0x42, 0xb7, 0xe0, 0xa4, 0x98, 0x3b, 0x2a,
	0x8e, 0xc5, 0x67, 0xef, 0xbd, 0xcf, 0xd9, 0x47, 0xb9, 0x8a, 0xb0, 0x5c, 0x16, 0x9b, 0xff, 0x31,
	0x18, 0x8c, 0xf4, 0x06, 0x0c, 0x52, 0x82, 0xc1, 0x40, 0xd8, 0x1b, 0x70, 0xd0, 0x21, 0x43, 0x5d,
	0xdf, 0x31, 0x75, 0x46, 0xad, 0x86, 0x88, 0x3c, 0x41, 0x11, 0x39, 0x3d, 0x73, 0xf1, 0xa0, 0xe2,
	0x51, 0xbb, 0xef, 0x14, 0x34, 0x2e, 0xbe, 0x4a, 0xad, 0x86, 0x60, 0xa6, 0x0d, 0xd2, 0xb6, 0x36,
	0xba, 0x01, 0x7d, 0x9e, 0x5f, 0xd1, 0x2b, 0xd8, 0x31, 0x3d, 0x15, 0x0e, 0xbd, 0x3a, 0x3a, 0x35,
	0xaf, 0xf8, 0x95, 0x12, 0x76, 0x4c, 0x2d, 0xe5, 0x05, 0x1f, 0xde, 0xd8, 0x5f, 0x14, 0x18, 0x6c,
	0x9f, 0x0f, 0x5d, 0x86, 0x64, 0x5d, 0xde, 0x77, 0x87, 0x56, 0xf7, 0x78, 0xd0, 0xfd, 0x41, 0x18,
	0x74, 0x45, 0x95, 0x8f, 0xcb, 0x09, 0x71, 0xbc, 0x25, 0xa3, 0xed, 0x11, 0xc5, 0xf1, 0x16, 0x2a,
	0x43, 0x4f, 0x9d, 0x98, 0x16, 0x76, 0xa4, 0x1b, 0x1f, 0x49, 0x83, 0x14, 0xe5, 0x47, 0x36, 0xd8,
	0x21, 0xf1, 0x0e, 0xd6, 0x82, 0xc6, 0xd8, 0x2f, 0x15, 0xe8, 0x95, 0x16, 0xf8, 0x0c, 0xff, 0xcb,
	0xfb, 0x12, 0x8c, 0x45, 0x6e, 0xe1, 0x33, 0xcb, 0x96, 0x49, 0x94, 0x1e, 0xa4, 0x88, 0x49, 0x11,
	0x33, 0xa2, 0x6a, 0xed, 0x5a, 0x0b, 0xb0, 0x20, 0x72, 0xc5, 0x27, 0x61, 0x64, 0x3f, 0xe9, 0xe0,
	0xaf, 0x4f, 0xed, 0x91, 0x7d, 0xe4, 0xce, 0xcd, 0xc3, 0x89, 0x03, 0xee, 0x64, 0x74, 0x1c, 0x86,
	0x97, 0x17, 0x8a, 0xe5, 0x6b, 0x37, 0xaf, 0x2d, 0xae, 0xea, 0x6b, 0x8b, 0x37, 0x16, 0x97, 0x5e,
	0x5c, 0xcc, 0x1c, 0x43, 0x00, 0x3d, 0xf3, 0x8b, 0xb3, 0x4b, 0x4b, 0x5a, 0x46, 0x41, 0x69, 0xe8,
	0x5d, 0x5a, 0x5b, 0x15, 0x8d, 0x44, 0x69, 0xed, 0x77, 0x7f, 0x1e, 0x3f, 0xf6, 0xd6, 0xce, 0xb8,
	0xf2, 0xfd, 0x9d, 0x71, 0xe5, 0x4f, 0x3b, 0xe3, 0xca, 0xa7, 0x3b, 0xe3, 0xc7, 0xfe, 0xb6, 0x33,
	0xae, 0xbc, 0xf7, 0xc9, 0xf8, 0xb1, 0x0f, 0x3f, 0x19, 0x3f, 0xf6, 0x8b, 0x4f, 0xc6, 0x95, 0x97,
	0xa6, 0x8f, 0x50, 0xb0, 0x61, 0x4e, 0xa3, 0x52, 0xe9, 0x11, 0x7b, 0x75, 0xe1, 0xdf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x03, 0x19, 0x1f, 0x6d, 0x7a, 0x22, 0x00, 0x00,
}

func (x GatewayAntennaPlacement) String() string {
	s, ok := GatewayAntennaPlacement_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *GatewayBrand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayBrand)
	if !ok {
		that2, ok := that.(GatewayBrand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.URL != that1.URL {
		return false
	}
	if len(this.Logos) != len(that1.Logos) {
		return false
	}
	for i := range this.Logos {
		if this.Logos[i] != that1.Logos[i] {
			return false
		}
	}
	return true
}
func (this *GatewayModel) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayModel)
	if !ok {
		that2, ok := that.(GatewayModel)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BrandID != that1.BrandID {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *GatewayVersionIdentifiers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayVersionIdentifiers)
	if !ok {
		that2, ok := that.(GatewayVersionIdentifiers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BrandID != that1.BrandID {
		return false
	}
	if this.ModelID != that1.ModelID {
		return false
	}
	if this.HardwareVersion != that1.HardwareVersion {
		return false
	}
	if this.FirmwareVersion != that1.FirmwareVersion {
		return false
	}
	return true
}
func (this *GatewayRadio) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayRadio)
	if !ok {
		that2, ok := that.(GatewayRadio)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Enable != that1.Enable {
		return false
	}
	if this.ChipType != that1.ChipType {
		return false
	}
	if this.Frequency != that1.Frequency {
		return false
	}
	if this.RSSIOffset != that1.RSSIOffset {
		return false
	}
	if !this.TxConfiguration.Equal(that1.TxConfiguration) {
		return false
	}
	return true
}
func (this *GatewayRadio_TxConfiguration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayRadio_TxConfiguration)
	if !ok {
		that2, ok := that.(GatewayRadio_TxConfiguration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinFrequency != that1.MinFrequency {
		return false
	}
	if this.MaxFrequency != that1.MaxFrequency {
		return false
	}
	if this.NotchFrequency != that1.NotchFrequency {
		return false
	}
	return true
}
func (this *GatewayClaimAuthenticationCode) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayClaimAuthenticationCode)
	if !ok {
		that2, ok := that.(GatewayClaimAuthenticationCode)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Secret.Equal(that1.Secret) {
		return false
	}
	if that1.ValidFrom == nil {
		if this.ValidFrom != nil {
			return false
		}
	} else if !this.ValidFrom.Equal(*that1.ValidFrom) {
		return false
	}
	if that1.ValidTo == nil {
		if this.ValidTo != nil {
			return false
		}
	} else if !this.ValidTo.Equal(*that1.ValidTo) {
		return false
	}
	return true
}
func (this *Gateway) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gateway)
	if !ok {
		that2, ok := that.(Gateway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if that1.DeletedAt == nil {
		if this.DeletedAt != nil {
			return false
		}
	} else if !this.DeletedAt.Equal(*that1.DeletedAt) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	if len(this.ContactInfo) != len(that1.ContactInfo) {
		return false
	}
	for i := range this.ContactInfo {
		if !this.ContactInfo[i].Equal(that1.ContactInfo[i]) {
			return false
		}
	}
	if !this.GatewayVersionIdentifiers.Equal(&that1.GatewayVersionIdentifiers) {
		return false
	}
	if this.GatewayServerAddress != that1.GatewayServerAddress {
		return false
	}
	if this.AutoUpdate != that1.AutoUpdate {
		return false
	}
	if this.UpdateChannel != that1.UpdateChannel {
		return false
	}
	if this.FrequencyPlanID != that1.FrequencyPlanID {
		return false
	}
	if len(this.FrequencyPlanIDs) != len(that1.FrequencyPlanIDs) {
		return false
	}
	for i := range this.FrequencyPlanIDs {
		if this.FrequencyPlanIDs[i] != that1.FrequencyPlanIDs[i] {
			return false
		}
	}
	if len(this.Antennas) != len(that1.Antennas) {
		return false
	}
	for i := range this.Antennas {
		if !this.Antennas[i].Equal(&that1.Antennas[i]) {
			return false
		}
	}
	if this.StatusPublic != that1.StatusPublic {
		return false
	}
	if this.LocationPublic != that1.LocationPublic {
		return false
	}
	if this.ScheduleDownlinkLate != that1.ScheduleDownlinkLate {
		return false
	}
	if this.EnforceDutyCycle != that1.EnforceDutyCycle {
		return false
	}
	if this.DownlinkPathConstraint != that1.DownlinkPathConstraint {
		return false
	}
	if this.ScheduleAnytimeDelay != nil && that1.ScheduleAnytimeDelay != nil {
		if *this.ScheduleAnytimeDelay != *that1.ScheduleAnytimeDelay {
			return false
		}
	} else if this.ScheduleAnytimeDelay != nil {
		return false
	} else if that1.ScheduleAnytimeDelay != nil {
		return false
	}
	if this.UpdateLocationFromStatus != that1.UpdateLocationFromStatus {
		return false
	}
	if !this.LBSLNSSecret.Equal(that1.LBSLNSSecret) {
		return false
	}
	if !this.ClaimAuthenticationCode.Equal(that1.ClaimAuthenticationCode) {
		return false
	}
	if this.TargetCUPSURI != that1.TargetCUPSURI {
		return false
	}
	if !this.TargetCUPSKey.Equal(that1.TargetCUPSKey) {
		return false
	}
	if this.RequireAuthenticatedConnection != that1.RequireAuthenticatedConnection {
		return false
	}
	if !this.Lrfhss.Equal(that1.Lrfhss) {
		return false
	}
	if this.DisablePacketBrokerForwarding != that1.DisablePacketBrokerForwarding {
		return false
	}
	return true
}
func (this *Gateway_LRFHSS) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gateway_LRFHSS)
	if !ok {
		that2, ok := that.(Gateway_LRFHSS)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Supported != that1.Supported {
		return false
	}
	return true
}
func (this *Gateways) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Gateways)
	if !ok {
		that2, ok := that.(Gateways)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Gateways) != len(that1.Gateways) {
		return false
	}
	for i := range this.Gateways {
		if !this.Gateways[i].Equal(that1.Gateways[i]) {
			return false
		}
	}
	return true
}
func (this *GetGatewayRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetGatewayRequest)
	if !ok {
		that2, ok := that.(GetGatewayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	return true
}
func (this *GetGatewayIdentifiersForEUIRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetGatewayIdentifiersForEUIRequest)
	if !ok {
		that2, ok := that.(GetGatewayIdentifiersForEUIRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Eui.Equal(that1.Eui) {
		return false
	}
	return true
}
func (this *ListGatewaysRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListGatewaysRequest)
	if !ok {
		that2, ok := that.(ListGatewaysRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Collaborator.Equal(that1.Collaborator) {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	if this.Order != that1.Order {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Deleted != that1.Deleted {
		return false
	}
	return true
}
func (this *CreateGatewayRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateGatewayRequest)
	if !ok {
		that2, ok := that.(CreateGatewayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Gateway.Equal(&that1.Gateway) {
		return false
	}
	if !this.Collaborator.Equal(&that1.Collaborator) {
		return false
	}
	return true
}
func (this *UpdateGatewayRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateGatewayRequest)
	if !ok {
		that2, ok := that.(UpdateGatewayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Gateway.Equal(&that1.Gateway) {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	return true
}
func (this *ListGatewayAPIKeysRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListGatewayAPIKeysRequest)
	if !ok {
		that2, ok := that.(ListGatewayAPIKeysRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *GetGatewayAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetGatewayAPIKeyRequest)
	if !ok {
		that2, ok := that.(GetGatewayAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if this.KeyId != that1.KeyId {
		return false
	}
	return true
}
func (this *CreateGatewayAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateGatewayAPIKeyRequest)
	if !ok {
		that2, ok := that.(CreateGatewayAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Rights) != len(that1.Rights) {
		return false
	}
	for i := range this.Rights {
		if this.Rights[i] != that1.Rights[i] {
			return false
		}
	}
	if that1.ExpiresAt == nil {
		if this.ExpiresAt != nil {
			return false
		}
	} else if !this.ExpiresAt.Equal(*that1.ExpiresAt) {
		return false
	}
	return true
}
func (this *UpdateGatewayAPIKeyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateGatewayAPIKeyRequest)
	if !ok {
		that2, ok := that.(UpdateGatewayAPIKeyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if !this.APIKey.Equal(&that1.APIKey) {
		return false
	}
	if !this.FieldMask.Equal(that1.FieldMask) {
		return false
	}
	return true
}
func (this *ListGatewayCollaboratorsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListGatewayCollaboratorsRequest)
	if !ok {
		that2, ok := that.(ListGatewayCollaboratorsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *GetGatewayCollaboratorRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetGatewayCollaboratorRequest)
	if !ok {
		that2, ok := that.(GetGatewayCollaboratorRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if !this.OrganizationOrUserIdentifiers.Equal(&that1.OrganizationOrUserIdentifiers) {
		return false
	}
	return true
}
func (this *SetGatewayCollaboratorRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetGatewayCollaboratorRequest)
	if !ok {
		that2, ok := that.(SetGatewayCollaboratorRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GatewayIdentifiers.Equal(&that1.GatewayIdentifiers) {
		return false
	}
	if !this.Collaborator.Equal(&that1.Collaborator) {
		return false
	}
	return true
}
func (this *GatewayAntenna) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayAntenna)
	if !ok {
		that2, ok := that.(GatewayAntenna)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Gain != that1.Gain {
		return false
	}
	if !this.Location.Equal(that1.Location) {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	if this.Placement != that1.Placement {
		return false
	}
	return true
}
func (this *GatewayStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayStatus)
	if !ok {
		that2, ok := that.(GatewayStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Time.Equal(that1.Time) {
		return false
	}
	if !this.BootTime.Equal(that1.BootTime) {
		return false
	}
	if len(this.Versions) != len(that1.Versions) {
		return false
	}
	for i := range this.Versions {
		if this.Versions[i] != that1.Versions[i] {
			return false
		}
	}
	if len(this.AntennaLocations) != len(that1.AntennaLocations) {
		return false
	}
	for i := range this.AntennaLocations {
		if !this.AntennaLocations[i].Equal(that1.AntennaLocations[i]) {
			return false
		}
	}
	if len(this.IP) != len(that1.IP) {
		return false
	}
	for i := range this.IP {
		if this.IP[i] != that1.IP[i] {
			return false
		}
	}
	if len(this.Metrics) != len(that1.Metrics) {
		return false
	}
	for i := range this.Metrics {
		if this.Metrics[i] != that1.Metrics[i] {
			return false
		}
	}
	if !this.Advanced.Equal(that1.Advanced) {
		return false
	}
	return true
}
func (this *GatewayConnectionStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayConnectionStats)
	if !ok {
		that2, ok := that.(GatewayConnectionStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.ConnectedAt == nil {
		if this.ConnectedAt != nil {
			return false
		}
	} else if !this.ConnectedAt.Equal(*that1.ConnectedAt) {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if that1.LastStatusReceivedAt == nil {
		if this.LastStatusReceivedAt != nil {
			return false
		}
	} else if !this.LastStatusReceivedAt.Equal(*that1.LastStatusReceivedAt) {
		return false
	}
	if !this.LastStatus.Equal(that1.LastStatus) {
		return false
	}
	if that1.LastUplinkReceivedAt == nil {
		if this.LastUplinkReceivedAt != nil {
			return false
		}
	} else if !this.LastUplinkReceivedAt.Equal(*that1.LastUplinkReceivedAt) {
		return false
	}
	if this.UplinkCount != that1.UplinkCount {
		return false
	}
	if that1.LastDownlinkReceivedAt == nil {
		if this.LastDownlinkReceivedAt != nil {
			return false
		}
	} else if !this.LastDownlinkReceivedAt.Equal(*that1.LastDownlinkReceivedAt) {
		return false
	}
	if this.DownlinkCount != that1.DownlinkCount {
		return false
	}
	if !this.RoundTripTimes.Equal(that1.RoundTripTimes) {
		return false
	}
	if len(this.SubBands) != len(that1.SubBands) {
		return false
	}
	for i := range this.SubBands {
		if !this.SubBands[i].Equal(that1.SubBands[i]) {
			return false
		}
	}
	return true
}
func (this *GatewayConnectionStats_RoundTripTimes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayConnectionStats_RoundTripTimes)
	if !ok {
		that2, ok := that.(GatewayConnectionStats_RoundTripTimes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Min != that1.Min {
		return false
	}
	if this.Max != that1.Max {
		return false
	}
	if this.Median != that1.Median {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *GatewayConnectionStats_SubBand) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayConnectionStats_SubBand)
	if !ok {
		that2, ok := that.(GatewayConnectionStats_SubBand)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MinFrequency != that1.MinFrequency {
		return false
	}
	if this.MaxFrequency != that1.MaxFrequency {
		return false
	}
	if this.DownlinkUtilizationLimit != that1.DownlinkUtilizationLimit {
		return false
	}
	if this.DownlinkUtilization != that1.DownlinkUtilization {
		return false
	}
	return true
}
func NewPopulatedGatewayVersionIdentifiers(r randyGateway, easy bool) *GatewayVersionIdentifiers {
	this := &GatewayVersionIdentifiers{}
	this.BrandID = string(randStringGateway(r))
	this.ModelID = string(randStringGateway(r))
	this.HardwareVersion = string(randStringGateway(r))
	this.FirmwareVersion = string(randStringGateway(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayClaimAuthenticationCode(r randyGateway, easy bool) *GatewayClaimAuthenticationCode {
	this := &GatewayClaimAuthenticationCode{}
	if r.Intn(5) != 0 {
		this.Secret = NewPopulatedSecret(r, easy)
	}
	if r.Intn(5) != 0 {
		this.ValidFrom = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.ValidTo = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGateway(r randyGateway, easy bool) *Gateway {
	this := &Gateway{}
	v1 := NewPopulatedGatewayIdentifiers(r, easy)
	this.GatewayIdentifiers = *v1
	v2 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v2
	v3 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.UpdatedAt = *v3
	if r.Intn(5) != 0 {
		this.DeletedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	this.Name = string(randStringGateway(r))
	this.Description = string(randStringGateway(r))
	if r.Intn(5) != 0 {
		v4 := r.Intn(10)
		this.Attributes = make(map[string]string)
		for i := 0; i < v4; i++ {
			this.Attributes[randStringGateway(r)] = randStringGateway(r)
		}
	}
	if r.Intn(5) != 0 {
		v5 := r.Intn(5)
		this.ContactInfo = make([]*ContactInfo, v5)
		for i := 0; i < v5; i++ {
			this.ContactInfo[i] = NewPopulatedContactInfo(r, easy)
		}
	}
	v6 := NewPopulatedGatewayVersionIdentifiers(r, easy)
	this.GatewayVersionIdentifiers = *v6
	this.GatewayServerAddress = string(randStringGateway(r))
	this.AutoUpdate = bool(bool(r.Intn(2) == 0))
	this.UpdateChannel = string(randStringGateway(r))
	this.FrequencyPlanID = string(randStringGateway(r))
	v7 := r.Intn(10)
	this.FrequencyPlanIDs = make([]string, v7)
	for i := 0; i < v7; i++ {
		this.FrequencyPlanIDs[i] = string(randStringGateway(r))
	}
	if r.Intn(5) != 0 {
		v8 := r.Intn(5)
		this.Antennas = make([]GatewayAntenna, v8)
		for i := 0; i < v8; i++ {
			v9 := NewPopulatedGatewayAntenna(r, easy)
			this.Antennas[i] = *v9
		}
	}
	this.StatusPublic = bool(bool(r.Intn(2) == 0))
	this.LocationPublic = bool(bool(r.Intn(2) == 0))
	this.ScheduleDownlinkLate = bool(bool(r.Intn(2) == 0))
	this.EnforceDutyCycle = bool(bool(r.Intn(2) == 0))
	this.DownlinkPathConstraint = DownlinkPathConstraint([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(5) != 0 {
		this.ScheduleAnytimeDelay = github_com_gogo_protobuf_types.NewPopulatedStdDuration(r, easy)
	}
	this.UpdateLocationFromStatus = bool(bool(r.Intn(2) == 0))
	if r.Intn(5) != 0 {
		this.LBSLNSSecret = NewPopulatedSecret(r, easy)
	}
	if r.Intn(5) != 0 {
		this.ClaimAuthenticationCode = NewPopulatedGatewayClaimAuthenticationCode(r, easy)
	}
	this.TargetCUPSURI = string(randStringGateway(r))
	if r.Intn(5) != 0 {
		this.TargetCUPSKey = NewPopulatedSecret(r, easy)
	}
	this.RequireAuthenticatedConnection = bool(bool(r.Intn(2) == 0))
	if r.Intn(5) != 0 {
		this.Lrfhss = NewPopulatedGateway_LRFHSS(r, easy)
	}
	this.DisablePacketBrokerForwarding = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGateway_LRFHSS(r randyGateway, easy bool) *Gateway_LRFHSS {
	this := &Gateway_LRFHSS{}
	this.Supported = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayAntenna(r randyGateway, easy bool) *GatewayAntenna {
	this := &GatewayAntenna{}
	this.Gain = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.Gain *= -1
	}
	if r.Intn(5) != 0 {
		this.Location = NewPopulatedLocation(r, easy)
	}
	if r.Intn(5) != 0 {
		v10 := r.Intn(10)
		this.Attributes = make(map[string]string)
		for i := 0; i < v10; i++ {
			this.Attributes[randStringGateway(r)] = randStringGateway(r)
		}
	}
	this.Placement = GatewayAntennaPlacement([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyGateway interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneGateway(r randyGateway) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringGateway(r randyGateway) string {
	v11 := r.Intn(100)
	tmps := make([]rune, v11)
	for i := 0; i < v11; i++ {
		tmps[i] = randUTF8RuneGateway(r)
	}
	return string(tmps)
}
func randUnrecognizedGateway(r randyGateway, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldGateway(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldGateway(dAtA []byte, r randyGateway, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		v12 := r.Int63()
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(v12))
	case 1:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateGateway(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateGateway(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GatewayBrand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.URL)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Logos) > 0 {
		for _, s := range m.Logos {
			l = len(s)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *GatewayModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BrandID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GatewayVersionIdentifiers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BrandID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.ModelID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.HardwareVersion)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.FirmwareVersion)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GatewayRadio) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enable {
		n += 2
	}
	l = len(m.ChipType)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Frequency != 0 {
		n += 1 + sovGateway(uint64(m.Frequency))
	}
	if m.RSSIOffset != 0 {
		n += 5
	}
	if m.TxConfiguration != nil {
		l = m.TxConfiguration.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GatewayRadio_TxConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinFrequency != 0 {
		n += 1 + sovGateway(uint64(m.MinFrequency))
	}
	if m.MaxFrequency != 0 {
		n += 1 + sovGateway(uint64(m.MaxFrequency))
	}
	if m.NotchFrequency != 0 {
		n += 1 + sovGateway(uint64(m.NotchFrequency))
	}
	return n
}

func (m *GatewayClaimAuthenticationCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Secret != nil {
		l = m.Secret.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.ValidFrom != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ValidFrom)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.ValidTo != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ValidTo)
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *Gateway) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovGateway(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovGateway(uint64(l))
	if m.DeletedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.DeletedAt)
		n += 2 + l + sovGateway(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if len(m.ContactInfo) > 0 {
		for _, e := range m.ContactInfo {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	l = m.GatewayVersionIdentifiers.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = len(m.GatewayServerAddress)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.AutoUpdate {
		n += 2
	}
	l = len(m.UpdateChannel)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.FrequencyPlanID)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.FrequencyPlanIDs) > 0 {
		for _, s := range m.FrequencyPlanIDs {
			l = len(s)
			n += 2 + l + sovGateway(uint64(l))
		}
	}
	if len(m.Antennas) > 0 {
		for _, e := range m.Antennas {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if m.StatusPublic {
		n += 2
	}
	if m.LocationPublic {
		n += 2
	}
	if m.ScheduleDownlinkLate {
		n += 3
	}
	if m.EnforceDutyCycle {
		n += 3
	}
	if m.DownlinkPathConstraint != 0 {
		n += 2 + sovGateway(uint64(m.DownlinkPathConstraint))
	}
	if m.ScheduleAnytimeDelay != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ScheduleAnytimeDelay)
		n += 2 + l + sovGateway(uint64(l))
	}
	if m.UpdateLocationFromStatus {
		n += 3
	}
	if m.LBSLNSSecret != nil {
		l = m.LBSLNSSecret.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	if m.ClaimAuthenticationCode != nil {
		l = m.ClaimAuthenticationCode.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	l = len(m.TargetCUPSURI)
	if l > 0 {
		n += 2 + l + sovGateway(uint64(l))
	}
	if m.TargetCUPSKey != nil {
		l = m.TargetCUPSKey.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	if m.RequireAuthenticatedConnection {
		n += 3
	}
	if m.Lrfhss != nil {
		l = m.Lrfhss.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	if m.DisablePacketBrokerForwarding {
		n += 3
	}
	return n
}

func (m *Gateway_LRFHSS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Supported {
		n += 2
	}
	return n
}

func (m *Gateways) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Gateways) > 0 {
		for _, e := range m.Gateways {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *GetGatewayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovGateway(uint64(l))
	if m.FieldMask != nil {
		l = m.FieldMask.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GetGatewayIdentifiersForEUIRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Eui.Size()
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func (m *ListGatewaysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Collaborator != nil {
		l = m.Collaborator.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.FieldMask != nil {
		l = m.FieldMask.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovGateway(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovGateway(uint64(m.Page))
	}
	if m.Deleted {
		n += 2
	}
	return n
}

func (m *CreateGatewayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Gateway.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = m.Collaborator.Size()
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func (m *UpdateGatewayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Gateway.Size()
	n += 1 + l + sovGateway(uint64(l))
	if m.FieldMask != nil {
		l = m.FieldMask.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *ListGatewayAPIKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovGateway(uint64(l))
	if m.Limit != 0 {
		n += 1 + sovGateway(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovGateway(uint64(m.Page))
	}
	return n
}

func (m *GetGatewayAPIKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = len(m.KeyId)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *CreateGatewayAPIKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Rights) > 0 {
		l = 0
		for _, e := range m.Rights {
			l += sovGateway(uint64(e))
		}
		n += 1 + sovGateway(uint64(l)) + l
	}
	if m.ExpiresAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpiresAt)
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *UpdateGatewayAPIKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = m.APIKey.Size()
	n += 1 + l + sovGateway(uint64(l))
	if m.FieldMask != nil {
		l = m.FieldMask.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *ListGatewayCollaboratorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovGateway(uint64(l))
	if m.Limit != 0 {
		n += 1 + sovGateway(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovGateway(uint64(m.Page))
	}
	return n
}

func (m *GetGatewayCollaboratorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = m.OrganizationOrUserIdentifiers.Size()
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func (m *SetGatewayCollaboratorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GatewayIdentifiers.Size()
	n += 1 + l + sovGateway(uint64(l))
	l = m.Collaborator.Size()
	n += 1 + l + sovGateway(uint64(l))
	return n
}

func (m *GatewayAntenna) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gain != 0 {
		n += 5
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if m.Placement != 0 {
		n += 1 + sovGateway(uint64(m.Placement))
	}
	return n
}

func (m *GatewayStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovGateway(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.BootTime)
	n += 1 + l + sovGateway(uint64(l))
	if len(m.Versions) > 0 {
		for k, v := range m.Versions {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + len(v) + sovGateway(uint64(len(v)))
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if len(m.AntennaLocations) > 0 {
		for _, e := range m.AntennaLocations {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.IP) > 0 {
		for _, s := range m.IP {
			l = len(s)
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	if len(m.Metrics) > 0 {
		for k, v := range m.Metrics {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGateway(uint64(len(k))) + 1 + 4
			n += mapEntrySize + 1 + sovGateway(uint64(mapEntrySize))
		}
	}
	if m.Advanced != nil {
		l = m.Advanced.Size()
		n += 2 + l + sovGateway(uint64(l))
	}
	return n
}

func (m *GatewayConnectionStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnectedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ConnectedAt)
		n += 1 + l + sovGateway(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.LastStatusReceivedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastStatusReceivedAt)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.LastStatus != nil {
		l = m.LastStatus.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.LastUplinkReceivedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastUplinkReceivedAt)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.UplinkCount != 0 {
		n += 1 + sovGateway(uint64(m.UplinkCount))
	}
	if m.LastDownlinkReceivedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastDownlinkReceivedAt)
		n += 1 + l + sovGateway(uint64(l))
	}
	if m.DownlinkCount != 0 {
		n += 1 + sovGateway(uint64(m.DownlinkCount))
	}
	if m.RoundTripTimes != nil {
		l = m.RoundTripTimes.Size()
		n += 1 + l + sovGateway(uint64(l))
	}
	if len(m.SubBands) > 0 {
		for _, e := range m.SubBands {
			l = e.Size()
			n += 1 + l + sovGateway(uint64(l))
		}
	}
	return n
}

func (m *GatewayConnectionStats_RoundTripTimes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Min)
	n += 1 + l + sovGateway(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Max)
	n += 1 + l + sovGateway(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Median)
	n += 1 + l + sovGateway(uint64(l))
	if m.Count != 0 {
		n += 1 + sovGateway(uint64(m.Count))
	}
	return n
}

func (m *GatewayConnectionStats_SubBand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinFrequency != 0 {
		n += 1 + sovGateway(uint64(m.MinFrequency))
	}
	if m.MaxFrequency != 0 {
		n += 1 + sovGateway(uint64(m.MaxFrequency))
	}
	if m.DownlinkUtilizationLimit != 0 {
		n += 5
	}
	if m.DownlinkUtilization != 0 {
		n += 5
	}
	return n
}

func sovGateway(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGateway(x uint64) (n int) {
	return sovGateway(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GatewayBrand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayBrand{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`URL:` + fmt.Sprintf("%v", this.URL) + `,`,
		`Logos:` + fmt.Sprintf("%v", this.Logos) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayModel) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayModel{`,
		`BrandID:` + fmt.Sprintf("%v", this.BrandID) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayVersionIdentifiers) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayVersionIdentifiers{`,
		`BrandID:` + fmt.Sprintf("%v", this.BrandID) + `,`,
		`ModelID:` + fmt.Sprintf("%v", this.ModelID) + `,`,
		`HardwareVersion:` + fmt.Sprintf("%v", this.HardwareVersion) + `,`,
		`FirmwareVersion:` + fmt.Sprintf("%v", this.FirmwareVersion) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayRadio) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayRadio{`,
		`Enable:` + fmt.Sprintf("%v", this.Enable) + `,`,
		`ChipType:` + fmt.Sprintf("%v", this.ChipType) + `,`,
		`Frequency:` + fmt.Sprintf("%v", this.Frequency) + `,`,
		`RSSIOffset:` + fmt.Sprintf("%v", this.RSSIOffset) + `,`,
		`TxConfiguration:` + strings.Replace(fmt.Sprintf("%v", this.TxConfiguration), "GatewayRadio_TxConfiguration", "GatewayRadio_TxConfiguration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayRadio_TxConfiguration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayRadio_TxConfiguration{`,
		`MinFrequency:` + fmt.Sprintf("%v", this.MinFrequency) + `,`,
		`MaxFrequency:` + fmt.Sprintf("%v", this.MaxFrequency) + `,`,
		`NotchFrequency:` + fmt.Sprintf("%v", this.NotchFrequency) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayClaimAuthenticationCode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayClaimAuthenticationCode{`,
		`Secret:` + strings.Replace(fmt.Sprintf("%v", this.Secret), "Secret", "Secret", 1) + `,`,
		`ValidFrom:` + strings.Replace(fmt.Sprintf("%v", this.ValidFrom), "Timestamp", "types.Timestamp", 1) + `,`,
		`ValidTo:` + strings.Replace(fmt.Sprintf("%v", this.ValidTo), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Gateway) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForContactInfo := "[]*ContactInfo{"
	for _, f := range this.ContactInfo {
		repeatedStringForContactInfo += strings.Replace(fmt.Sprintf("%v", f), "ContactInfo", "ContactInfo", 1) + ","
	}
	repeatedStringForContactInfo += "}"
	repeatedStringForAntennas := "[]GatewayAntenna{"
	for _, f := range this.Antennas {
		repeatedStringForAntennas += strings.Replace(strings.Replace(f.String(), "GatewayAntenna", "GatewayAntenna", 1), `&`, ``, 1) + ","
	}
	repeatedStringForAntennas += "}"
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&Gateway{`,
		`GatewayIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.GatewayIdentifiers), "GatewayIdentifiers", "GatewayIdentifiers", 1), `&`, ``, 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`UpdatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`DeletedAt:` + strings.Replace(fmt.Sprintf("%v", this.DeletedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`ContactInfo:` + repeatedStringForContactInfo + `,`,
		`GatewayVersionIdentifiers:` + strings.Replace(strings.Replace(this.GatewayVersionIdentifiers.String(), "GatewayVersionIdentifiers", "GatewayVersionIdentifiers", 1), `&`, ``, 1) + `,`,
		`GatewayServerAddress:` + fmt.Sprintf("%v", this.GatewayServerAddress) + `,`,
		`AutoUpdate:` + fmt.Sprintf("%v", this.AutoUpdate) + `,`,
		`UpdateChannel:` + fmt.Sprintf("%v", this.UpdateChannel) + `,`,
		`FrequencyPlanID:` + fmt.Sprintf("%v", this.FrequencyPlanID) + `,`,
		`FrequencyPlanIDs:` + fmt.Sprintf("%v", this.FrequencyPlanIDs) + `,`,
		`Antennas:` + repeatedStringForAntennas + `,`,
		`StatusPublic:` + fmt.Sprintf("%v", this.StatusPublic) + `,`,
		`LocationPublic:` + fmt.Sprintf("%v", this.LocationPublic) + `,`,
		`ScheduleDownlinkLate:` + fmt.Sprintf("%v", this.ScheduleDownlinkLate) + `,`,
		`EnforceDutyCycle:` + fmt.Sprintf("%v", this.EnforceDutyCycle) + `,`,
		`DownlinkPathConstraint:` + fmt.Sprintf("%v", this.DownlinkPathConstraint) + `,`,
		`ScheduleAnytimeDelay:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleAnytimeDelay), "Duration", "types.Duration", 1) + `,`,
		`UpdateLocationFromStatus:` + fmt.Sprintf("%v", this.UpdateLocationFromStatus) + `,`,
		`LBSLNSSecret:` + strings.Replace(fmt.Sprintf("%v", this.LBSLNSSecret), "Secret", "Secret", 1) + `,`,
		`ClaimAuthenticationCode:` + strings.Replace(this.ClaimAuthenticationCode.String(), "GatewayClaimAuthenticationCode", "GatewayClaimAuthenticationCode", 1) + `,`,
		`TargetCUPSURI:` + fmt.Sprintf("%v", this.TargetCUPSURI) + `,`,
		`TargetCUPSKey:` + strings.Replace(fmt.Sprintf("%v", this.TargetCUPSKey), "Secret", "Secret", 1) + `,`,
		`RequireAuthenticatedConnection:` + fmt.Sprintf("%v", this.RequireAuthenticatedConnection) + `,`,
		`Lrfhss:` + strings.Replace(fmt.Sprintf("%v", this.Lrfhss), "Gateway_LRFHSS", "Gateway_LRFHSS", 1) + `,`,
		`DisablePacketBrokerForwarding:` + fmt.Sprintf("%v", this.DisablePacketBrokerForwarding) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Gateway_LRFHSS) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Gateway_LRFHSS{`,
		`Supported:` + fmt.Sprintf("%v", this.Supported) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Gateways) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForGateways := "[]*Gateway{"
	for _, f := range this.Gateways {
		repeatedStringForGateways += strings.Replace(f.String(), "Gateway", "Gateway", 1) + ","
	}
	repeatedStringForGateways += "}"
	s := strings.Join([]string{`&Gateways{`,
		`Gateways:` + repeatedStringForGateways + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetGatewayRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetGatewayRequest{`,
		`GatewayIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.GatewayIdentifiers), "GatewayIdentifiers", "GatewayIdentifiers", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetGatewayIdentifiersForEUIRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetGatewayIdentifiersForEUIRequest{`,
		`Eui:` + fmt.Sprintf("%v", this.Eui) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListGatewaysRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListGatewaysRequest{`,
		`Collaborator:` + strings.Replace(fmt.Sprintf("%v", this.Collaborator), "OrganizationOrUserIdentifiers", "OrganizationOrUserIdentifiers", 1) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`Order:` + fmt.Sprintf("%v", this.Order) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Deleted:` + fmt.Sprintf("%v", this.Deleted) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateGatewayRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateGatewayRequest{`,
		`Gateway:` + strings.Replace(strings.Replace(this.Gateway.String(), "Gateway", "Gateway", 1), `&`, ``, 1) + `,`,
		`Collaborator:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Collaborator), "OrganizationOrUserIdentifiers", "OrganizationOrUserIdentifiers", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGatewayRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGatewayRequest{`,
		`Gateway:` + strings.Replace(strings.Replace(this.Gateway.String(), "Gateway", "Gateway", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListGatewayAPIKeysRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListGatewayAPIKeysRequest{`,
		`GatewayIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.GatewayIdentifiers), "GatewayIdentifiers", "GatewayIdentifiers", 1), `&`, ``, 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetGatewayAPIKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetGatewayAPIKeyRequest{`,
		`GatewayIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.GatewayIdentifiers), "GatewayIdentifiers", "GatewayIdentifiers", 1), `&`, ``, 1) + `,`,
		`KeyId:` + fmt.Sprintf("%v", this.KeyId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateGatewayAPIKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateGatewayAPIKeyRequest{`,
		`GatewayIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.GatewayIdentifiers), "GatewayIdentifiers", "GatewayIdentifiers", 1), `&`, ``, 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Rights:` + fmt.Sprintf("%v", this.Rights) + `,`,
		`ExpiresAt:` + strings.Replace(fmt.Sprintf("%v", this.ExpiresAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateGatewayAPIKeyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateGatewayAPIKeyRequest{`,
		`GatewayIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.GatewayIdentifiers), "GatewayIdentifiers", "GatewayIdentifiers", 1), `&`, ``, 1) + `,`,
		`APIKey:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.APIKey), "APIKey", "APIKey", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListGatewayCollaboratorsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListGatewayCollaboratorsRequest{`,
		`GatewayIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.GatewayIdentifiers), "GatewayIdentifiers", "GatewayIdentifiers", 1), `&`, ``, 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetGatewayCollaboratorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetGatewayCollaboratorRequest{`,
		`GatewayIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.GatewayIdentifiers), "GatewayIdentifiers", "GatewayIdentifiers", 1), `&`, ``, 1) + `,`,
		`OrganizationOrUserIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.OrganizationOrUserIdentifiers), "OrganizationOrUserIdentifiers", "OrganizationOrUserIdentifiers", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetGatewayCollaboratorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetGatewayCollaboratorRequest{`,
		`GatewayIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.GatewayIdentifiers), "GatewayIdentifiers", "GatewayIdentifiers", 1), `&`, ``, 1) + `,`,
		`Collaborator:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Collaborator), "Collaborator", "Collaborator", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayAntenna) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&GatewayAntenna{`,
		`Gain:` + fmt.Sprintf("%v", this.Gain) + `,`,
		`Location:` + strings.Replace(fmt.Sprintf("%v", this.Location), "Location", "Location", 1) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`Placement:` + fmt.Sprintf("%v", this.Placement) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAntennaLocations := "[]*Location{"
	for _, f := range this.AntennaLocations {
		repeatedStringForAntennaLocations += strings.Replace(fmt.Sprintf("%v", f), "Location", "Location", 1) + ","
	}
	repeatedStringForAntennaLocations += "}"
	keysForVersions := make([]string, 0, len(this.Versions))
	for k := range this.Versions {
		keysForVersions = append(keysForVersions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForVersions)
	mapStringForVersions := "map[string]string{"
	for _, k := range keysForVersions {
		mapStringForVersions += fmt.Sprintf("%v: %v,", k, this.Versions[k])
	}
	mapStringForVersions += "}"
	keysForMetrics := make([]string, 0, len(this.Metrics))
	for k := range this.Metrics {
		keysForMetrics = append(keysForMetrics, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMetrics)
	mapStringForMetrics := "map[string]float32{"
	for _, k := range keysForMetrics {
		mapStringForMetrics += fmt.Sprintf("%v: %v,", k, this.Metrics[k])
	}
	mapStringForMetrics += "}"
	s := strings.Join([]string{`&GatewayStatus{`,
		`Time:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Time), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`BootTime:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.BootTime), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Versions:` + mapStringForVersions + `,`,
		`AntennaLocations:` + repeatedStringForAntennaLocations + `,`,
		`IP:` + fmt.Sprintf("%v", this.IP) + `,`,
		`Metrics:` + mapStringForMetrics + `,`,
		`Advanced:` + strings.Replace(fmt.Sprintf("%v", this.Advanced), "Struct", "types.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayConnectionStats) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubBands := "[]*GatewayConnectionStats_SubBand{"
	for _, f := range this.SubBands {
		repeatedStringForSubBands += strings.Replace(fmt.Sprintf("%v", f), "GatewayConnectionStats_SubBand", "GatewayConnectionStats_SubBand", 1) + ","
	}
	repeatedStringForSubBands += "}"
	s := strings.Join([]string{`&GatewayConnectionStats{`,
		`ConnectedAt:` + strings.Replace(fmt.Sprintf("%v", this.ConnectedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`LastStatusReceivedAt:` + strings.Replace(fmt.Sprintf("%v", this.LastStatusReceivedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`LastStatus:` + strings.Replace(this.LastStatus.String(), "GatewayStatus", "GatewayStatus", 1) + `,`,
		`LastUplinkReceivedAt:` + strings.Replace(fmt.Sprintf("%v", this.LastUplinkReceivedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`UplinkCount:` + fmt.Sprintf("%v", this.UplinkCount) + `,`,
		`LastDownlinkReceivedAt:` + strings.Replace(fmt.Sprintf("%v", this.LastDownlinkReceivedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`DownlinkCount:` + fmt.Sprintf("%v", this.DownlinkCount) + `,`,
		`RoundTripTimes:` + strings.Replace(fmt.Sprintf("%v", this.RoundTripTimes), "GatewayConnectionStats_RoundTripTimes", "GatewayConnectionStats_RoundTripTimes", 1) + `,`,
		`SubBands:` + repeatedStringForSubBands + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayConnectionStats_RoundTripTimes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayConnectionStats_RoundTripTimes{`,
		`Min:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Min), "Duration", "types.Duration", 1), `&`, ``, 1) + `,`,
		`Max:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Max), "Duration", "types.Duration", 1), `&`, ``, 1) + `,`,
		`Median:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Median), "Duration", "types.Duration", 1), `&`, ``, 1) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayConnectionStats_SubBand) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayConnectionStats_SubBand{`,
		`MinFrequency:` + fmt.Sprintf("%v", this.MinFrequency) + `,`,
		`MaxFrequency:` + fmt.Sprintf("%v", this.MaxFrequency) + `,`,
		`DownlinkUtilizationLimit:` + fmt.Sprintf("%v", this.DownlinkUtilizationLimit) + `,`,
		`DownlinkUtilization:` + fmt.Sprintf("%v", this.DownlinkUtilization) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGateway(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
