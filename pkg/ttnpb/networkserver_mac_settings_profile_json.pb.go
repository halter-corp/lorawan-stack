// Code generated by protoc-gen-go-json. DO NOT EDIT.
// versions:
// - protoc-gen-go-json v1.6.0
// - protoc             v4.23.4
// source: ttn/lorawan/v3/networkserver_mac_settings_profile.proto

package ttnpb

import (
	golang "github.com/TheThingsIndustries/protoc-gen-go-json/golang"
	jsonplugin "github.com/TheThingsIndustries/protoc-gen-go-json/jsonplugin"
)

// MarshalProtoJSON marshals the CreateMACSettingsProfileRequest message to JSON.
func (x *CreateMACSettingsProfileRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.MacSettingsProfileIds != nil || s.HasField("mac_settings_profile_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("mac_settings_profile_ids")
		// NOTE: MACSettingsProfileIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.MacSettingsProfileIds)
	}
	if x.MacSettingsProfile != nil || s.HasField("mac_settings_profile") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("mac_settings_profile")
		x.MacSettingsProfile.MarshalProtoJSON(s.WithField("mac_settings_profile"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the CreateMACSettingsProfileRequest to JSON.
func (x *CreateMACSettingsProfileRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the CreateMACSettingsProfileRequest message from JSON.
func (x *CreateMACSettingsProfileRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "mac_settings_profile_ids", "macSettingsProfileIds":
			s.AddField("mac_settings_profile_ids")
			if s.ReadNil() {
				x.MacSettingsProfileIds = nil
				return
			}
			// NOTE: MACSettingsProfileIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v MACSettingsProfileIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.MacSettingsProfileIds = &v
		case "mac_settings_profile", "macSettingsProfile":
			if s.ReadNil() {
				x.MacSettingsProfile = nil
				return
			}
			x.MacSettingsProfile = &MACSettingsProfile{}
			x.MacSettingsProfile.UnmarshalProtoJSON(s.WithField("mac_settings_profile", true))
		}
	})
}

// UnmarshalJSON unmarshals the CreateMACSettingsProfileRequest from JSON.
func (x *CreateMACSettingsProfileRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the CreateMACSettingsProfileResponse message to JSON.
func (x *CreateMACSettingsProfileResponse) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.MacSettingsProfile != nil || s.HasField("mac_settings_profile") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("mac_settings_profile")
		x.MacSettingsProfile.MarshalProtoJSON(s.WithField("mac_settings_profile"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the CreateMACSettingsProfileResponse to JSON.
func (x *CreateMACSettingsProfileResponse) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the CreateMACSettingsProfileResponse message from JSON.
func (x *CreateMACSettingsProfileResponse) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "mac_settings_profile", "macSettingsProfile":
			if s.ReadNil() {
				x.MacSettingsProfile = nil
				return
			}
			x.MacSettingsProfile = &MACSettingsProfile{}
			x.MacSettingsProfile.UnmarshalProtoJSON(s.WithField("mac_settings_profile", true))
		}
	})
}

// UnmarshalJSON unmarshals the CreateMACSettingsProfileResponse from JSON.
func (x *CreateMACSettingsProfileResponse) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GetMACSettingsProfileRequest message to JSON.
func (x *GetMACSettingsProfileRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.MacSettingsProfileIds != nil || s.HasField("mac_settings_profile_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("mac_settings_profile_ids")
		// NOTE: MACSettingsProfileIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.MacSettingsProfileIds)
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GetMACSettingsProfileRequest to JSON.
func (x *GetMACSettingsProfileRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GetMACSettingsProfileRequest message from JSON.
func (x *GetMACSettingsProfileRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "mac_settings_profile_ids", "macSettingsProfileIds":
			s.AddField("mac_settings_profile_ids")
			if s.ReadNil() {
				x.MacSettingsProfileIds = nil
				return
			}
			// NOTE: MACSettingsProfileIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v MACSettingsProfileIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.MacSettingsProfileIds = &v
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the GetMACSettingsProfileRequest from JSON.
func (x *GetMACSettingsProfileRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GetMACSettingsProfileResponse message to JSON.
func (x *GetMACSettingsProfileResponse) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.MacSettingsProfile != nil || s.HasField("mac_settings_profile") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("mac_settings_profile")
		x.MacSettingsProfile.MarshalProtoJSON(s.WithField("mac_settings_profile"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GetMACSettingsProfileResponse to JSON.
func (x *GetMACSettingsProfileResponse) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GetMACSettingsProfileResponse message from JSON.
func (x *GetMACSettingsProfileResponse) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "mac_settings_profile", "macSettingsProfile":
			if s.ReadNil() {
				x.MacSettingsProfile = nil
				return
			}
			x.MacSettingsProfile = &MACSettingsProfile{}
			x.MacSettingsProfile.UnmarshalProtoJSON(s.WithField("mac_settings_profile", true))
		}
	})
}

// UnmarshalJSON unmarshals the GetMACSettingsProfileResponse from JSON.
func (x *GetMACSettingsProfileResponse) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the UpdateMACSettingsProfileRequest message to JSON.
func (x *UpdateMACSettingsProfileRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.MacSettingsProfileIds != nil || s.HasField("mac_settings_profile_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("mac_settings_profile_ids")
		// NOTE: MACSettingsProfileIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.MacSettingsProfileIds)
	}
	if x.MacSettingsProfile != nil || s.HasField("mac_settings_profile") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("mac_settings_profile")
		x.MacSettingsProfile.MarshalProtoJSON(s.WithField("mac_settings_profile"))
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the UpdateMACSettingsProfileRequest to JSON.
func (x *UpdateMACSettingsProfileRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the UpdateMACSettingsProfileRequest message from JSON.
func (x *UpdateMACSettingsProfileRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "mac_settings_profile_ids", "macSettingsProfileIds":
			s.AddField("mac_settings_profile_ids")
			if s.ReadNil() {
				x.MacSettingsProfileIds = nil
				return
			}
			// NOTE: MACSettingsProfileIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v MACSettingsProfileIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.MacSettingsProfileIds = &v
		case "mac_settings_profile", "macSettingsProfile":
			if s.ReadNil() {
				x.MacSettingsProfile = nil
				return
			}
			x.MacSettingsProfile = &MACSettingsProfile{}
			x.MacSettingsProfile.UnmarshalProtoJSON(s.WithField("mac_settings_profile", true))
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the UpdateMACSettingsProfileRequest from JSON.
func (x *UpdateMACSettingsProfileRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the UpdateMACSettingsProfileResponse message to JSON.
func (x *UpdateMACSettingsProfileResponse) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.MacSettingsProfile != nil || s.HasField("mac_settings_profile") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("mac_settings_profile")
		x.MacSettingsProfile.MarshalProtoJSON(s.WithField("mac_settings_profile"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the UpdateMACSettingsProfileResponse to JSON.
func (x *UpdateMACSettingsProfileResponse) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the UpdateMACSettingsProfileResponse message from JSON.
func (x *UpdateMACSettingsProfileResponse) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "mac_settings_profile", "macSettingsProfile":
			if s.ReadNil() {
				x.MacSettingsProfile = nil
				return
			}
			x.MacSettingsProfile = &MACSettingsProfile{}
			x.MacSettingsProfile.UnmarshalProtoJSON(s.WithField("mac_settings_profile", true))
		}
	})
}

// UnmarshalJSON unmarshals the UpdateMACSettingsProfileResponse from JSON.
func (x *UpdateMACSettingsProfileResponse) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ListMACSettingsProfilesRequest message to JSON.
func (x *ListMACSettingsProfilesRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.ApplicationIds != nil || s.HasField("application_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("application_ids")
		// NOTE: ApplicationIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.ApplicationIds)
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	if x.Order != "" || s.HasField("order") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("order")
		s.WriteString(x.Order)
	}
	if x.Limit != 0 || s.HasField("limit") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("limit")
		s.WriteUint32(x.Limit)
	}
	if x.Page != 0 || s.HasField("page") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("page")
		s.WriteUint32(x.Page)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ListMACSettingsProfilesRequest to JSON.
func (x *ListMACSettingsProfilesRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ListMACSettingsProfilesRequest message from JSON.
func (x *ListMACSettingsProfilesRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "application_ids", "applicationIds":
			s.AddField("application_ids")
			if s.ReadNil() {
				x.ApplicationIds = nil
				return
			}
			// NOTE: ApplicationIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v ApplicationIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.ApplicationIds = &v
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		case "order":
			s.AddField("order")
			x.Order = s.ReadString()
		case "limit":
			s.AddField("limit")
			x.Limit = s.ReadUint32()
		case "page":
			s.AddField("page")
			x.Page = s.ReadUint32()
		}
	})
}

// UnmarshalJSON unmarshals the ListMACSettingsProfilesRequest from JSON.
func (x *ListMACSettingsProfilesRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ListMACSettingsProfilesResponse message to JSON.
func (x *ListMACSettingsProfilesResponse) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.MacSettingsProfiles) > 0 || s.HasField("mac_settings_profiles") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("mac_settings_profiles")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.MacSettingsProfiles {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("mac_settings_profiles"))
		}
		s.WriteArrayEnd()
	}
	if x.TotalCount != 0 || s.HasField("total_count") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("total_count")
		s.WriteUint32(x.TotalCount)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ListMACSettingsProfilesResponse to JSON.
func (x *ListMACSettingsProfilesResponse) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ListMACSettingsProfilesResponse message from JSON.
func (x *ListMACSettingsProfilesResponse) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "mac_settings_profiles", "macSettingsProfiles":
			s.AddField("mac_settings_profiles")
			if s.ReadNil() {
				x.MacSettingsProfiles = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.MacSettingsProfiles = append(x.MacSettingsProfiles, nil)
					return
				}
				v := &MACSettingsProfile{}
				v.UnmarshalProtoJSON(s.WithField("mac_settings_profiles", false))
				if s.Err() != nil {
					return
				}
				x.MacSettingsProfiles = append(x.MacSettingsProfiles, v)
			})
		case "total_count", "totalCount":
			s.AddField("total_count")
			x.TotalCount = s.ReadUint32()
		}
	})
}

// UnmarshalJSON unmarshals the ListMACSettingsProfilesResponse from JSON.
func (x *ListMACSettingsProfilesResponse) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}
