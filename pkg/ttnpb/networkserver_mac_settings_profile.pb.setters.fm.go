// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

func (dst *CreateMACSettingsProfileRequest) SetFields(src *CreateMACSettingsProfileRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "mac_settings_profile":
			if len(subs) > 0 {
				var newDst, newSrc *MACSettingsProfile
				if (src == nil || src.MacSettingsProfile == nil) && dst.MacSettingsProfile == nil {
					continue
				}
				if src != nil {
					newSrc = src.MacSettingsProfile
				}
				if dst.MacSettingsProfile != nil {
					newDst = dst.MacSettingsProfile
				} else {
					newDst = &MACSettingsProfile{}
					dst.MacSettingsProfile = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.MacSettingsProfile = src.MacSettingsProfile
				} else {
					dst.MacSettingsProfile = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *CreateMACSettingsProfileResponse) SetFields(src *CreateMACSettingsProfileResponse, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "mac_settings_profile":
			if len(subs) > 0 {
				var newDst, newSrc *MACSettingsProfile
				if (src == nil || src.MacSettingsProfile == nil) && dst.MacSettingsProfile == nil {
					continue
				}
				if src != nil {
					newSrc = src.MacSettingsProfile
				}
				if dst.MacSettingsProfile != nil {
					newDst = dst.MacSettingsProfile
				} else {
					newDst = &MACSettingsProfile{}
					dst.MacSettingsProfile = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.MacSettingsProfile = src.MacSettingsProfile
				} else {
					dst.MacSettingsProfile = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GetMACSettingsProfileRequest) SetFields(src *GetMACSettingsProfileRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "mac_settings_profile_ids":
			if len(subs) > 0 {
				var newDst, newSrc *MACSettingsProfileIdentifiers
				if (src == nil || src.MacSettingsProfileIds == nil) && dst.MacSettingsProfileIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.MacSettingsProfileIds
				}
				if dst.MacSettingsProfileIds != nil {
					newDst = dst.MacSettingsProfileIds
				} else {
					newDst = &MACSettingsProfileIdentifiers{}
					dst.MacSettingsProfileIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.MacSettingsProfileIds = src.MacSettingsProfileIds
				} else {
					dst.MacSettingsProfileIds = nil
				}
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				dst.FieldMask = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GetMACSettingsProfileResponse) SetFields(src *GetMACSettingsProfileResponse, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "mac_settings_profile":
			if len(subs) > 0 {
				var newDst, newSrc *MACSettingsProfile
				if (src == nil || src.MacSettingsProfile == nil) && dst.MacSettingsProfile == nil {
					continue
				}
				if src != nil {
					newSrc = src.MacSettingsProfile
				}
				if dst.MacSettingsProfile != nil {
					newDst = dst.MacSettingsProfile
				} else {
					newDst = &MACSettingsProfile{}
					dst.MacSettingsProfile = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.MacSettingsProfile = src.MacSettingsProfile
				} else {
					dst.MacSettingsProfile = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *UpdateMACSettingsProfileRequest) SetFields(src *UpdateMACSettingsProfileRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "mac_settings_profile_ids":
			if len(subs) > 0 {
				var newDst, newSrc *MACSettingsProfileIdentifiers
				if (src == nil || src.MacSettingsProfileIds == nil) && dst.MacSettingsProfileIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.MacSettingsProfileIds
				}
				if dst.MacSettingsProfileIds != nil {
					newDst = dst.MacSettingsProfileIds
				} else {
					newDst = &MACSettingsProfileIdentifiers{}
					dst.MacSettingsProfileIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.MacSettingsProfileIds = src.MacSettingsProfileIds
				} else {
					dst.MacSettingsProfileIds = nil
				}
			}
		case "mac_settings_profile":
			if len(subs) > 0 {
				var newDst, newSrc *MACSettingsProfile
				if (src == nil || src.MacSettingsProfile == nil) && dst.MacSettingsProfile == nil {
					continue
				}
				if src != nil {
					newSrc = src.MacSettingsProfile
				}
				if dst.MacSettingsProfile != nil {
					newDst = dst.MacSettingsProfile
				} else {
					newDst = &MACSettingsProfile{}
					dst.MacSettingsProfile = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.MacSettingsProfile = src.MacSettingsProfile
				} else {
					dst.MacSettingsProfile = nil
				}
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				dst.FieldMask = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *UpdateMACSettingsProfileResponse) SetFields(src *UpdateMACSettingsProfileResponse, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "mac_settings_profile":
			if len(subs) > 0 {
				var newDst, newSrc *MACSettingsProfile
				if (src == nil || src.MacSettingsProfile == nil) && dst.MacSettingsProfile == nil {
					continue
				}
				if src != nil {
					newSrc = src.MacSettingsProfile
				}
				if dst.MacSettingsProfile != nil {
					newDst = dst.MacSettingsProfile
				} else {
					newDst = &MACSettingsProfile{}
					dst.MacSettingsProfile = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.MacSettingsProfile = src.MacSettingsProfile
				} else {
					dst.MacSettingsProfile = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *DeleteMACSettingsProfileRequest) SetFields(src *DeleteMACSettingsProfileRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "mac_settings_profile_ids":
			if len(subs) > 0 {
				var newDst, newSrc *MACSettingsProfileIdentifiers
				if (src == nil || src.MacSettingsProfileIds == nil) && dst.MacSettingsProfileIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.MacSettingsProfileIds
				}
				if dst.MacSettingsProfileIds != nil {
					newDst = dst.MacSettingsProfileIds
				} else {
					newDst = &MACSettingsProfileIdentifiers{}
					dst.MacSettingsProfileIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.MacSettingsProfileIds = src.MacSettingsProfileIds
				} else {
					dst.MacSettingsProfileIds = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *DeleteMACSettingsProfileResponse) SetFields(src *DeleteMACSettingsProfileResponse, paths ...string) error {
	if len(paths) != 0 {
		return fmt.Errorf("message DeleteMACSettingsProfileResponse has no fields, but paths %s were specified", paths)
	}
	return nil
}

func (dst *ListMACSettingsProfilesRequest) SetFields(src *ListMACSettingsProfilesRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "application_ids":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationIdentifiers
				if (src == nil || src.ApplicationIds == nil) && dst.ApplicationIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.ApplicationIds
				}
				if dst.ApplicationIds != nil {
					newDst = dst.ApplicationIds
				} else {
					newDst = &ApplicationIdentifiers{}
					dst.ApplicationIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.ApplicationIds = src.ApplicationIds
				} else {
					dst.ApplicationIds = nil
				}
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				dst.FieldMask = nil
			}
		case "order":
			if len(subs) > 0 {
				return fmt.Errorf("'order' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Order = src.Order
			} else {
				var zero string
				dst.Order = zero
			}
		case "limit":
			if len(subs) > 0 {
				return fmt.Errorf("'limit' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Limit = src.Limit
			} else {
				var zero uint32
				dst.Limit = zero
			}
		case "page":
			if len(subs) > 0 {
				return fmt.Errorf("'page' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Page = src.Page
			} else {
				var zero uint32
				dst.Page = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ListMACSettingsProfilesResponse) SetFields(src *ListMACSettingsProfilesResponse, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "mac_settings_profiles":
			if len(subs) > 0 {
				return fmt.Errorf("'mac_settings_profiles' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MacSettingsProfiles = src.MacSettingsProfiles
			} else {
				dst.MacSettingsProfiles = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
